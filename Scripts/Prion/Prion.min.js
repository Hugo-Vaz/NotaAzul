// @nome: Prion
// @autor: Thiago Motta Zappaterra
// @email: tmottaz@gmail.com
// @versão: 1.67 - data: 04/10/2013

var Prion = Prion || {},
    showLog = showLog || {},
    EstadoObjeto = EstadoObjeto || {};

(function (window, document) {
    "use strict";

    var Class = function (_1) {
        var _2 = function () {
            this.constructor = _2;
            return (arguments[0] !== null && this.initialize && $typeOf(this.initialize) == "function") ? this.initialize.apply(this, arguments) : this;
            return (arguments[0] !== null && this.initialize && $typeOf(this.constructor) == "function") ? this.constructor.apply(this, arguments) : this
        };
        $extend(_2, this);
        _2.prototype = _1 || {};
        _2.constructor = Class;
        _2.ID = {
            type: "class"
        };
        return _2
    };
    Class.prototype = {
        implement: function () {
            var _3 = {}, _4 = arguments;
            if ($typeOf(arguments[0]) == "string" && arguments[1]) {
                _3[arguments[0]] = arguments[1];
                _4 = [_3]
            }
            for (var i = 0, l = _4.length; i < l; i++) {
                $extend(this.prototype, _4[i]);
                if (_4[i] && _4[i].constructor === Options) {
                    this.setOptions = $extend.bind(this.prototype.options)
                }
            }
            return this
        },
        extend: function (_7) {
            var _8 = new this(null);
            var _9 = {};
            var _a;
            for (var _b in _7) {
                var pp = _8[_b];
                _8[_b] = Class.Merge(pp, _7[_b])
            }
            _8.constructor = this;
            for (var i in _8) {
                if ($typeOf(_8[i]) === "function" && !_8[i].parent) {
                    _8[i].parent = _8[i]
                }
            }
            _a = new Class(_8);
            if (this.setOptions) {
                _a.setOptions = $extend.bind(_a.prototype.options)
            }
            return _a
        }
    };
    Class.Merge = function (_e, _f) {
        if (_e && _e != _f) {
            var _10 = $typeOf(_f);
            if (_10 != $typeOf(_e)) {
                return _f
            }
            switch (_10) {
                case "function":
                    var _11 = function () {
                        this.parent = arguments.callee.parent;
                        return _f.apply(this, arguments)
                    };
                    _11.parent = _e;
                    return _11;
                case "object":
                    return $merge(_e, _f)
            }
        }
        return _f
    };

    /**
    * functions de terceiros
    **/
    var $extend = function () {
        var _1b = arguments;
        if (!_1b[1]) {
            _1b = [this, _1b[0]]
        }
        if (!_1b[1]) {
            return _1b[0]
        }
        for (var p in _1b[1]) {
            try {
                _1b[0][p] = _1b[1][p]
            } catch (ex) {
                console.error("Failed to extend : " + _1b[0] + ", to : " + p)
            }
        }
        return _1b[0]
    };

    var $type = null;
    var $typeOf = $type = function (obj) {
        var _13, ret;
        if (obj === null || obj === undefined) {
            return false
        }
        if (obj.ID && obj.ID.type) {
            return obj.ID.type
        }
        if (obj.window) {
            obj.ID = {
                type: "window"
            };
            return "window"
        }
        _13 = typeof (obj);
        if (_13 == "object" && (obj.extented && obj.type) || (obj.target || obj.srcElement)) {
            if (obj.type) {
                obj.ID = {
                    type: "event"
                };
                return "event"
            }
        }
        if (_13 == "object" && obj.nodeName) {
            switch (obj.nodeType) {
                case 1:
                    ret = "element";
                    break;
                case 3:
                    ret = (/\S/).test(obj.nodeValue) ? "textnode" : "whitespace";
                    break
            }
            obj.ID = {
                type: ret
            };
            return ret
        }
        if (obj.length !== undefined && typeof obj.length == "number") {
            if (obj.item) {
                ret = "collection"
            }
            if (obj.callee) {
                ret = "arguments"
            }
            if (!window.ie) {
                obj.ID = {
                    type: ret
                }
            }
            return ret
        }
        return _13
    };

    var $rnd = function (min, max) {
        return min + (Math.random() * (max - min))
    };

    var $A = function (arg, _27) {
        var _28 = [],
                _29 = $typeOf(arg);
        if (_29 === "string") {
            return arg.toArray()
        }
        if (_29 === "object") {
            each(arg, function (_2a) {
                _28.push(_2a)
            });
            return _28
        }
        _27 = _27 || 0;
        if (_27 !== 0 && _29 === "arguments") {
            return Array.prototype.slice.call(arg)
        }
        if (_27 < 0) {
            _27 = arg.length + _27
        }
        var _2b = _2b || (arg.length - _27);
        for (var i = 0; i < _2b; i++) {
            _28[i] = arg[_27++]
        }
        return _28
    };

    var Abstract = function (obj) {
        obj = obj || {};
        obj.extend = $extend;
        return obj
    };

    var prototypes = [Array, String, Date, Number, Function, RegExp, Boolean, window.HTMLElement];
    for (var i = 0, l = prototypes.length; i < l; i++) {
        prototypes[i].extend = function () {
            $extend(this.prototype, arguments[0])
        };
        prototypes[i].prototype.ID = {
            type: ["array", "string", "date", "number", "function", "regexp", "boolean"][i]
        }
    }


    Prion = (function () {
        /**********************************************************************************************
        ** PRIVATE
        **********************************************************************************************/
        var _config = null;
        var _controller = { id: 0, base: "prionEl", zIndex: 9900 };


        /**
        * @descrição: modifica o estado do objeto de acordo com o campo que possui o atributo "rimary-key"=true
        **/
        var _changeStateObject = function (obj, nameForm) {
            if ((nameForm == null) || (nameForm.trim() == "")) {
                return obj;
            }

            var form = $("#" + nameForm.replace("#", "") + " input[primary-key=true]");
            if (form.length == 0) {
                return obj;
            }

            // se já existir o atributo "stadoObjeto", retorna sem fazer nada
            if (obj["EstadoObjeto"] != null) {
                return obj;
            }

            // se não existir o atributo "Estadoobjeto", cria e definir como Novo
            if (form[0].value.trim() == "") {
                obj["EstadoObjeto"] = EstadoObjeto.Novo;
            }

            return obj;
        };


        /**
        * @descrição: Define na interface os dados do objeto recebido por parâmetro
        * @params: runDependence => arry de objetos que conterá uma lista de dependencias
        **/
        var _definirDadosObj = function (el, objects, obj, runDependence) {
            if (obj == null) {
                return;
            }

            var objectIsArray = isArray(objects);
            var nameObjetao = null; // haha, olha o nome disso! Eu sou o TMZ, uma figura mesmo

            // haha, olha o nome disso! Eu sou o TMZ, uma figura mesmo
            for (var nameObjetim in obj) {

                // reseta a variável
                nameObjetao = -1;

                // verifica se é um array
                if (objectIsArray) {
                    // pega o indice do objeto
                    nameObjetao = objects.indexOf(nameObjetim);
                    if (nameObjetao >= 0) {
                        // pega o nome do objeto através do seu indice
                        nameObjetao = objects[nameObjetao];
                    }
                }


                // varre todos os atributos do objeto
                var nameElement = "", valueProperty = "", tagName = "", idElement = "";

                // obtém o objetim
                var objIteracao = (nameObjetao == -1) ? obj : obj[nameObjetim];

                // utilizado no wysiwyg
                var iframe = false;

                // pega o nome inicial do objeto
                var nomeInicialObjetoComPonto = ((objects == "") || (objects == null)) ? "" : objects + ".";
                var nomeInicialObjetoComUnderline = ((objects == "") || (objects == null)) ? "" : objects + "_";

                for (var p in objIteracao) {

                    if (nameObjetao == -1) {
                        nameElement = (objectIsArray) ? p : nomeInicialObjetoComPonto + p;
                    } else {
                        nameElement = (objectIsArray) ? nameObjetao + "." + p : nomeInicialObjetoComPonto + p;
                    }

                    idElement = nomeInicialObjetoComUnderline + p;
                    valueProperty = objIteracao[p];
                    iframe = false;

                    var element = document.querySelectorAll("#" + el + " input[name='" + nameElement + "']");

                    // verifica se encontrou algum elemento
                    if ((element != null) && (element.length >= 1)) {
                        var attr = element[0].getAttribute("set-automatic");
                        if ((attr != null) && (attr.toLowerCase() == "false")) {
                            continue;
                        }
                    }

                    // se não achou nenhum elemento do tipo INPUT...
                    if ((element == null) || (element.length == 0)) {

                        // tenta localizar algum elemento do tipo TEXTAREA
                        element = document.querySelectorAll("#" + el + " textarea[name='" + nameElement + "']");
                        if ((element == null) || (element.length == 0)) {

                            // tenta localizar algum elemento do tipo SELECT
                            element = document.querySelectorAll("#" + el + " select[name='" + nameElement + "']");
                            if ((element == null) || (element.length == 0)) {
                                continue;
                            }
                        } else {
                            // se entrou aqui é porque achou algum elemento do tipo textarea.
                            // neste caso, verifica se este elemento possui o atributo fieldtype
                            // se possuir este atributo, verifica se ele é do tipo 'wysiwyg'

                            var atributo = element[0].getAttribute("fieldtype");

                            if (atributo != null) {
                                // se entrou é porque possui o atributo 'fieldtype'
                                // verifica se ele é do tipo 'wysiwyg'
                                if (atributo.toLowerCase() == "wysiwyg") {
                                    iframe = true;
                                }
                            }
                        }
                    }

                    var dependencia = ((runDependence != null) && (runDependence[idElement] != null)) ? runDependence[idElement] : null;



                    // obtém o tipo do campo
                    tagName = (iframe) ? "iframe" : element[0].tagName.toLowerCase();
                    var mask = null;

                    switch (tagName) {
                        case "iframe":
                            {
                                $("#" + idElement).wysiwyg("setContent", valueProperty);
                                break;
                            }
                        case "label":
                        case "input":
                            {
                                if (element.length == 1) {
                                    // tenta obter o atributo "mask"
                                    mask = element[0].getAttribute("mask");

                                    // se o elemento for do tipo "money", altera o valueProperty...
                                    if (mask != null) {
                                        switch (mask.toLowerCase()) {
                                            case "money":
                                                {
                                                    valueProperty = valueProperty.format(2, ",", ".");
                                                    if (tagName == "label") {
                                                        valueProperty = Prion.settings.Moeda.simbolo.trim() + " " + valueProperty;
                                                    }

                                                    break;
                                                }

                                            case "dd/mm/aaaa":
                                                {
                                                    valueProperty = Prion.Format(valueProperty, mask);
                                                    break;
                                                }
                                        }
                                    }

                                    element[0].value = valueProperty;
                                } else if (element.length >= 2) {
                                    var elChecked = null, elDefault = null;

                                    // obtém element com o mesmo value
                                    for (var k = 0; k < element.length; k++) {
                                        // verifica se o value é igual
                                        if (element[k].value.toString() == valueProperty.toString()) {
                                            elDefault = element[k];
                                            break;
                                        }
                                    }

                                    Prion.RadioButton.Reset(element, elDefault);
                                }
                                break;
                            }

                        case "textarea":
                            {
                                element[0].value = valueProperty;
                                break;
                            }

                        case "select":
                            {
                                var fnCallback = function () {
                                    Prion.ComboBox.SelecionarIndexPeloValue(element[0], valueProperty);
                                };

                                if ((dependencia != null) && (dependencia.type == "select")) {
                                    if (dependencia.before != null) {
                                        var valueField = objIteracao[idElement];
                                        var itemSelected = { value: valueField };
                                        var field = null;

                                        if (dependencia.getField != null) {
                                            field = objIteracao[dependencia.getField];
                                        }

                                        dependencia.before.call(this, itemSelected);
                                    }

                                    break;
                                }

                                fnCallback.call();
                                break;
                            }
                    }
                }

                // se não for um array, sai fora
                // solução temporária (16/03/2013)
                if (!objectIsArray) {
                    return;
                }
            }
        };


        /**
        * @descrição: Atualiza os dados do objeto de acordo com o tipo do campo
        * @return: retorna o objeto modificado
        **/
        var _requestReplaceData = function (objForm, config) {

            if ((config.replaceData == null) || (objForm == null) || (typeof config.replaceData != "object")) {
                return objForm;
            }

            // transforma a string em object
            //var newObj = Prion.FormToObject(nameForm.replace("#", ""), false);
            var newObj = objForm;

            // varre todas as configurações de replace
            for (var j = 0; j < config.replaceData.length; j++) {
                var type = config.replaceData[j].type;
                var vAtual = "";

                // se for do tipo float ou percent, faz um convert no valor atual do objeto
                if ((type.toLowerCase() == "money") || (type.toLowerCase() == "percent")) {
                    for (var k = 0; k < config.replaceData[j].fields.length; k++) {
                        vAtual = newObj[config.replaceData[j].fields[k].trim()];

                        if (isNull(vAtual)) {
                            Prion.Log({
                                type: "error",
                                msg: "Erro ao obter o valor do campo informado. Verifique se o nome informado esta correto. Você disse que o nome do campo é: " + config.replaceData[j].fields[k].trim() + "\nO nome do campo é este mesmo, tem certeza?"
                            });

                            continue;
                        }


                        // se a máscara for do tipo 'percent'...
                        if (type.toLowerCase() == "percent") {
                            // expressão regular para trocar o 'ponto' por 'virgula', e remover o '%'
                            vAtual = vAtual.replace(/\./g, ',').trim().replace("%", "").trim();
                        } else {
                            // expressão regular para remover todos os pontos: replace(/\./g, '')
                            // expressão regular para remover todos os +: replace(/\+/g, '')
                            vAtual = vAtual.replace(/\./g, '').trim().replace("R$", "").replace("U$", "").replace(/\+/g, '').trim();
                        }

                        newObj[config.replaceData[j].fields[k]] = vAtual;
                    }
                }

            }

            return newObj;
        };


        /******************************************************************************************
        ** PUBLIC
        ******************************************************************************************/
        return {

            /**
            * @descrição: configuração
            **/
            config: {
                ativarLog: false, // indica se será ou não utilizado o log. Se for true, algumas ações irão escrever no console do browser
                noCache: true, // indica se será ou não utilizado o cache para JS. Se for true, o cache de JS será desativado
                validateForm: {
                    /**
                    * tipos suportados: alert, theme, prion. 
                    * Indica como um erro na validação dos campos será exibido no sistema. 
                    * Se for "theme", indica que será utilizado a validação do thema utilizado no projeto
                    * Se for "prion", indica que será utilizado uma validação própria
                    **/
                    tipo: "theme"
                },
                loading: {
                    id: "loading", // id do elemento (sem #) que exibe um carregando
                    animate: false // indica se será ou não animado
                },
                showLog: { // existe um objeto em Prion.Other
                    Lista: false,
                    Window: false,
                    Creator: false,
                    PrionExec: false,
                    Loader: false
                }
            },

            settings: _prionSettings,

            Iniciar: function () {
                this.config.buildSistema = (typeof buildSistema == "undefined") ? "" : buildSistema;
            },

            /**
            * @descrição: Método responsável por exibir um alert (de acordo com o usado no sistema) para o usuário
            * @param: config (object) config.msg: Mensagem que irá aparecer no alert
            * @param: config (object) config.icone: icone que irá aparecer no alert
            * @return: void
            **/
            Alert: function (config) {
                if (config == null) { return; }

                var m = (config.msg == null) ? "" : config.msg;
                alert(m);
            },

            /**
            * @descrição: Altera o estado do objeto
            **/
            AlterarEstadoObjeto: function (obj/**, novoEstado **/) {
                if (obj == null) {
                    return;
                }

                var informouNovoEstadoObjeto = (arguments[1] != null);

                // se o estado atual do objeto for NULL e o usuário não informou o novo estado,
                // define então como EstadoObjeto.Novo
                if ((obj.EstadoObjeto == null) && (!informouNovoEstadoObjeto)) {
                    obj.EstadoObjeto = EstadoObjeto.Novo;
                    return;
                }

                // define o estado passado por parâmetro
                obj.EstadoObjeto = arguments[1];
            },

            /**
            * @descrição: exibe uma div de aguarde
            * @param ehParaOcultar: verifica se é para ocultar a div de aguarde
            **/
            Aguarde: function (ehParaExibir/**, animate*/) {
                var el = document.getElementById(this.config.loading.id);
                if (el == null) { return; }

                // verifica se é para ANIMAR
                var ehParaAnimar = ((arguments[1] == null) || (arguments[1] == true));

                var l = "#" + this.config.loading.id;

                if ((ehParaExibir) && ((el.style.visibility == "hidden") || (el.style.visibility == ""))) {
                    if (ehParaAnimar) { $(l).fadeIn(); }
                    else { $(l).css("display", "block"); }
                }
                else {
                    if (ehParaAnimar) { $(l).fadeOut(); }
                    else { $(l).css("display", "none"); }
                }
            },


            /**
            * @descrição: Método que aplica as configurações de um objeto à outro objeto
            **/
            Apply: function (objAtual, objUsuario) {
                if (objAtual && objUsuario && typeof objUsuario == "object") {
                    for (var p in objUsuario) {

                        if (typeof objUsuario[p] == "object") {
                            //Prion.Log({ msg: "object => " + p + " / objUsuario => " + objUsuario + " / objAtual => " + objAtual });

                            // verifica se o atributo atual existe no objeto
                            if (objAtual[p] == null) {
                                objAtual[p] = objUsuario[p];
                            } else {
                                Prion.Apply(objAtual[p], objUsuario[p]);
                            }
                        }
                        else {
                            objAtual[p] = objUsuario[p];
                        }
                    }
                }

                return objAtual;
            },


            /**
            * @descrição: Transforma um array em json. 
            **/
            ArrayToJson: function (arr/**, arg1NomeAtributoDe, arg2NomeAtributoPara, fnReplace **/) {
                /**
                * Se indicar os parâmetros "nomeAtributoDe" e "nomeAtributoPara", os nomes dos atributos serão substituidos
                * exemplo 1: 
                * arr = new Array();
                * arr.push({"Endereco.Nome":"Nome do Endereco"})
                * Prion.ArrayToJson(arr, "Endereco", "Usuario.Endereco[{0}]");
                *
                * saída:
                * Usuario.Endereco[0].Nome=Nome%20do%20Endereco
                *==========================
                * exemplo 2:
                * arr = new Array();
                * arr.push({'Endereco.Nome':'Nome do Endereco'})
                * Prion.ArrayToJson(arr);
                *
                * saída: 
                * Endereco.Nome=Nome%20do%20Endereco
                **/


                if ((arr == null) || (arr.length == 0)) {
                    return arr;
                }

                var newArray = new Array();
                var nomeAtributoDe = (arguments[1] == null) ? null : arguments[1];
                var nomeAtributoPara = (arguments[2] == null) ? null : arguments[2];
                var paramReplace = (arguments[3] == null) ? null : arguments[3];
                var str = "";
                var nomeAtributo = "", valorAtributo = "";

                for (var i = 0; i < arr.length; i++) {
                    var oAtual = arr[i];
                    var oNovo = {};
                    var atributoNovo = "";

                    if (nomeAtributoDe != null && nomeAtributoPara != null) {
                        for (var atributo in oAtual) {
                            atributoNovo = atributo.replace(nomeAtributoDe, nomeAtributoPara.format(i));
                            oNovo[atributoNovo] = oAtual[atributo];
                        }
                    } else {
                        oNovo = oAtual;
                    }


                    // se o parâmetro não for null e for do tipo "array"...
                    if ((paramReplace != null) && (isArray(paramReplace))) {
                        // faz um replace em cada campo
                        for (var j = 0; j < paramReplace.length; j++) {

                            // obtém o nome do atributo
                            // exemplo: TipoTelefone{0} virará TipoTelefone
                            nomeAtributo = paramReplace[j].de.format(i);

                            // obtém o valor do atributo
                            valorAtributo = oNovo[atributoNovo][nomeAtributo];

                            // apaga o atributo antigo (no caso TipoTelefone[0])
                            delete oNovo[atributoNovo][nomeAtributo];

                            // cria o novo atributo com o "[0]"
                            oNovo[atributoNovo][paramReplace[j].para] = valorAtributo;
                        }
                    }

                    if (str != "") { str += "&"; }
                    str += Prion.SerializeObject(oNovo);
                }

                return str;
            },


            /**
            * @descrição: Limpa todos os campos de um form. Por default não limpa os campos HIDDEN
            * @params: nomeForm (string): nome do form com ou sem o #
            * @return: void
            **/
            ClearForm: function (nomeForm/**, clearHiddenFields**/) {
                // verifica se o parâmetro foi informado...
                if ((nomeForm == null) || (nomeForm == "")) {
                    return;
                }

                var clearHidden = ((arguments[1] != null) && (arguments[1] == true));
                var f = (nomeForm.indexOf("#") >= 0) ? nomeForm : ("#" + nomeForm);

                // Se o form não existir, exibe um alert, apenas em modo debug
                if (0 == $(f).length) {
                    Prion.Log({ msg: "O form " + f + " não existe. Verifique se o nome está correto!", type: "error" });
                    return;
                }

                // limpa todos os campos hidden
                if (clearHidden) {
                    $(f + " input[type=hidden]").each(function () {
                        this.id.clear();
                    });
                }

                // limpa todos os campos text
                $(f + " input[type=text]").each(function () {
                    this.id.clear();
                });

                // limpa todos os campos password
                $(f + " input[type=password]").each(function () {
                    this.id.clear();
                });

                $(f + " textarea").each(function () {
                    // verifica se o elemento é possui o atributo "fieldtype"
                    var atributo = this.getAttribute("fieldtype");
                    var iframe = null;

                    if (atributo != null) {
                        // verifica se o atributo é "wysiwyg"
                        if (atributo.toLowerCase() == "wysiwyg") {
                            // localiza um elemento pelo seu ID
                            iframe = document.getElementById(this.id + "IFrame");
                        }
                    }

                    if (iframe != null) {
                        iframe.contentWindow.document.body.innerHTML = "";
                    } else {
                        this.id.clear();
                    }
                });


                // verifica se existe o objeto Prion.Theme
                // Se existir, chama a function ClearForm, que irá aplicar particularidades do Theme utilizado no projeto
                if (Prion.Theme != null) {
                    Prion.Theme[Prion.settings.theme].Form.Clear(f);
                }


                // obtém todos os combobox
                $(f + " select").each(function () {
                    if (Prion.Theme != null) {
                        Prion.Theme[Prion.settings.theme].ComboBox.Reset(this);
                    }

                    var attr = this.getAttribute("data");
                    if (attr != null) {

                        if (attr["buttons-disabled"] != null) {
                            var arr = attr["buttons-disabled"].split(" ");

                            for (var i = 0; i < arr.length; i++) {
                                if ((arr[i] == "") || (arr[i] == null)) { continue; }

                                var b = document.getElementById(arr[i]);
                                if (b == null) { continue; }

                                Prion.Buttons.AlterState(b, false);
                                Prion.Theme[Prion.settings.theme].Tooltip.Remove(b);
                            }
                        }
                    }

                    Prion.ComboBox.Reset(this);
                });

                // obtém todos os elementos do tipo radiobutton
                var elements = $(f + " input[type=radio]");
                var elDefault = null, checkDefault = false;

                // obtém o default
                for (var i = 0; i < elements.length; i++) {
                    checkDefault = ((elements[i].getAttribute("default") != null) && (elements[i].getAttribute("default") == "true"));

                    if (checkDefault) {
                        elDefault = elements[i];
                        break;
                    }
                }

                Prion.RadioButton.Reset(elements, elDefault);
                // FIM DO RADIOBUTTON
            },


            CreateElement: function (tipo, config) {
                if ((tipo == null) || (tipo == "")) { return; }

                var el = document.createElement(tipo);
                for (var c in config) {
                    // verifica se o atributo é default do elemento
                    if (el[c] != null) {
                        el[c] = config[c];
                        continue;
                    }

                    el.setAttribute(c, config[c]);
                }

                return el;
            },


            // Ordena um array através de uma propriedade
            // exemplo:
            //  arr = [{a:10, nome:"Op1"}, {a:8, nome:"Op0"}]
            //  arr.sort(Prion.DynamicSort("NomeCampo", "ASC", "string")) //type: string, integer, date
            //  arr.sort(Prion.DynamicSort("NomeCampo", "DESC", "string")) //type: string, integer, date
            DynamicSort: function (property, order, type) {
                var sortOrder = "ASC";
                type = type || "string";

                if ((order != null) && (order != "") && (order.toLowerCase() == "desc")) { //(property[0] === "-") {
                    sortOrder = "DESC";
                }

                switch (type.toLowerCase()) {
                    case "string":
                        {
                            return function (a, b) {
                                var a1 = a[property]; //.toLowerCase();
                                var b1 = b[property]; //.toLowerCase();

                                if ((a1 == null) || (b1 == null)) {
                                    return "";
                                }

                                a1 = a1.toLowerCase();
                                b1 = b1.toLowerCase();

                                /*if (sortOrder == "ASC") {
                                return a1.toLowerCase() > b1.toLowerCase();
                                } else {
                                return a1.toLowerCase() < b1.toLowerCase();
                                }*/

                                if (sortOrder == "ASC") {
                                    if (a1 < b1) //sort string ascending
                                        return -1;
                                    if (a1 > b1)
                                        return 1;
                                } else {
                                    if (a1 > b1) //sort string ascending
                                        return -1;
                                    if (a1 < b1)
                                        return 1;
                                }

                                return 0; //default return value (no sorting)
                            }

                        }

                    case "integer":
                        {
                            return function (a, b) {
                                if (sortOrder == "ASC") {
                                    return (a > b) ? 1 : -1;
                                } else {
                                    return (a > b) ? -1 : 1;
                                }
                            }

                        }

                    case "date":
                    case "datetime":
                        {
                            return function (a, b) {
                                var d1Temp = (a[property] == "") ? "2000-01-01 00:00:01" : a[property];
                                var d2Temp = (b[property] == "") ? "2000-01-01 00:00:01" : b[property];

                                var d1 = new Date(d1Temp);
                                var d2 = new Date(d2Temp);

                                return (sortOrder == "ASC") ? d1 - d2 : d2 - d1; //(d1 > d2) : (d1 < d2);
                            }

                        }
                }
            },


            /**
            * @descrição: Exibe uma mensagem de erro de acordo com o status vindo de um request
            **/
            Erro: function (config) {
                // exibir um alert ou colocar o conteudo em uma div? Ver como fazer...
                if (config.xhr == null) { return; }

                switch (config.xhr.status) {
                    case 0:
                    case 404:
                    case 500:
                        {
                            var msg = "Erro " + config.xhr.status.toString() + ": " + config.url + " " + config.xhr.statusText;

                            Prion.Mensagem({
                                mensagem: { TextoMensagem: msg, ClassName: "errorbox" },
                                hide: false // indica que a mensagem não sumirá, a não ser que o usuário clique no botão de fechar
                            });

                            break;
                        }
                }
            },


            /**
            * @descrição: formata um valor de acordo com o tipo da máscara
            * @return: retorna o valor formatado
            **/
            Format: function (value, mask) {
                if ((value == "") || (value == null)) { return ""; }

                switch (mask.toLowerCase()) {
                    case "dd/mm/aaaa":
                        {
                            mask = "dd/MM/yyyy";
                            var v = null;

                            // verifica o tipo do atributo value
                            if (typeof value == "string") {
                                // verifica se possui a string Date
                                if (value.indexOf("Date") < 0) {
                                    // se entrou aqui é porque não possui a string "Date"
                                    v = value.replaceAll("/", "-");
                                    v = v.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3");
                                    v = new Date(v);

                                    if (v == null) {
                                        return "";
                                    }
                                }
                            }

                            var d = ((v != null) && (isDate(v))) ? v : Date.initWithJSON(value);

                            // motivos para o year ser 0
                            // 1) value NULL ou VAZIO
                            // 2) ano 01/01/1900
                            if (d.getYear() == 0) {
                                return "";
                            }

                            return d.toFormat(mask);

                            break;
                        }

                    case "timestamp": 
                    {
                        return new Date(parseInt(value.substr(6, 13)));
                    }
                }
            },

            each: function (str, fn) {
                if (str == "") { return; }

                var arr = document.querySelectorAll(str);
                arr = Array.fromList(arr);
                arr.map(function (item) {
                    fn.call(this, item);
                });
            },


            /**
            * @descrição: Transforma os elementos de um form em object
            * @params: idForm (string): id do form, sem o #
            * @return: object
            **/
            FormToObject: function (idForm) {
                if ((idForm == null) || (idForm == "")) { return null; }

                idForm = idForm.replace("#", "");

                var arr = $("#" + idForm).serializeArray();


                // se não encontrou nenhum elemento, sai fora
                if ((arr == null) || (arr.length == 0)) {
                    return null;
                }

                var oFinal = new Object();

                // sai fora se não existir nenhum item no array
                if (0 == arr.length) {
                    return oFinal;
                }

                // varre a lista de elementos do form (apenas elementos que possuem name)
                for (var i = 0; i < arr.length; i++) {
                    oFinal[arr[i].name] = arr[i].value;
                }

                return oFinal;
            },


            /**
            * @descrição: gera um novo id para um elemento
            * @return: string: id para um novo elemento
            **/
            GenerateId: function () {
                _controller.id += 1;
                return (_controller.base + _controller.id);
            },

            GenerateZIndex: function () {
                _controller.zIndex += 1;
                return (_controller.zIndex);
            },

            /**
            * @descrição: Carrega uma página através do parâmetro "url" e joga o conteudo para dentro do elemento el
            * @param config: url => url que será chamada
            *                ocultarTitulo (true/false) => É opcional. Se não indicar, a barra de titulo NÃO sumirá
            *                el (opcional) => elemento (sem o # no nome) para onde o conteúdo carregado será jogado. Se não for informado, o conteúdo será jogado para dentro de "divContent" por default
            *                fnBeforeLoad (opcional) => função que será executada antes de qualquer coisa
            *                fnAfterLoad (opcional) => função que será executada depois da requisição
            **/
            LoadPage: function (config) {
                // verifica se existe a propriedade config.onlyJson
                if ((config.onlyJson != null) && (config.onlyJson)) {
                    Prion.Request(config);
                    return;
                }


                // se a URL não for informada, sai fora...
                if ((config.url == null) || (config.url.trim() == "")) {
                    return;
                }


                // se for a index, da um refresh na página
                if (config.url.trim() == "/Home/Index/") {
                    window.location.href = "/";
                    return;
                }

                // verifica se existe função para ser executada antes de carregar a página
                if (config.fnBefore != null) {
                    config.fnBefore.call(this);
                }


                // obtem o elemento. Se não tiver sido informado, pega o divContent como default
                var el = (config.el == null) ? "divContent" : config.el;

                // define o hash da página, apenas se for necessário
                if ((config.setHash != null) && (config.setHash) && ((bookmarks != "undefined") || (bookmarks != null))) {
                    var hash = "#menu=" + config.menu + "&url=" + config.url;
                    bookmarks.setHash(hash, config.url, el);
                }

                // apaga todo o conteúdo do elemento
                el.clear();

                $("#errorPage").css({ display: "none" });
                $("#" + el).load(
                    config.url,
                    function (response, status, xhr) {

                        switch (xhr.status) {
                            case 200:
                                {
                                    // verifica se existe a variável response
                                    if ((response != null) && (response != "")) {

                                        try {
                                            var responseObj = JSON.parse(response);

                                            // verifica se é para redirecionar para outra página
                                            if ((responseObj.isRedirect != null) && (responseObj.isRedirect)) {
                                                // redireciona para a URL
                                                window.location.href = responseObj.redirectTo;
                                            }
                                        } catch (err) {

                                        }
                                    }


                                    if (Prion.Theme != null) {
                                        Prion.Theme[Prion.settings.theme].Popup(config.el);
                                        Prion.Theme[Prion.settings.theme].Iniciar(config.el);
                                    }


                                    if (config.el != null) {
                                        // obtém todos os forms carregados para o elemento
                                        var forms = $("#" + config.el + " form");

                                        // se existir algum form...
                                        if ((forms != null) && (forms.length >= 1)) {
                                            for (var i = 0; i < forms.length; i++) {
                                                // aplica a máscara para todos os campos deste form
                                                Prion.Mascara(forms[i].id);
                                            }
                                        }
                                    }

                                    // verifica se existe função para ser executada depois de carregar a página
                                    if (config.fnAfterLoad != null) {
                                        config.fnAfterLoad.call(this, config)
                                    }

                                    // verifica se existe função success
                                    if (config.success != null) {
                                        config.success.call(this);
                                    }

                                    break;
                                }
                            case 404, 500:
                                {
                                    Prion.Erro({ response: response, status: xhr.status, xhr: xhr, url: config.url });
                                    Prion.Aguarde(false);
                                    break;
                                }
                            default:
                                {
                                    Prion.Erro({ response: response, status: xhr.status, xhr: xhr, url: config.url });
                                    Prion.Aguarde(false);
                                    break;
                                }
                        }
                    }
                );
            },

            /**
            * @descrição: Exibe o log (apenas se config.ativarLog = true) no console do browser
            * @params: objeto de configuração do log
            * @exemplo 1: 
            *       // exibe qualquer log
            *       Prion.Log("mensagem de log");
            *
            * @exemplo 2: 
            *       // exibe qualquer log
            *       Prion.Log({msg:"mensagem de log"});
            *
            * @exemplo 3: 
            *       // exibe um log do tipo ERROR
            *       Prion.Log({msg:"mensagem de log", type: "error"});
            *
            * @exemplo 4:
            *        // o log só será exibido se Prion.config.showLog.Lista for true
            *       Prion.Log({msg:"mensagem de log", type: "info", from: showLog.Lista});
            *
            * @return: void
            **/
            Log: function (arg0) {

                // se o log não estiver ativo
                if (!this.config.ativarLog) {
                    return;
                }

                // se for do tipo string...
                if (typeof arg0 == "string") {
                    console.log(arg0);
                    return;
                }

                // obtém as configurações do log
                var config = {};
                config.type = ((arg0 == null) || (arg0.type == null)) ? "log" : arg0.type;
                config.msg = ((arg0 == null) || (arg0.msg == null)) ? "< tmz: Log não informado >" : arg0.msg;
                config.from = ((arg0 == null) || (arg0.from == null)) ? null : arg0.from;

                // se não foi informado, não precisa validar
                if (config.from != null) {
                    // se for false, log então não é para ser exibido
                    if (Prion.config.showLog[config.from] == false) {
                        return;
                    }
                }

                // verifica o tipo do log
                switch (config.type) {
                    case "error": { console.error(config.msg); break; }
                    case "info": { console.info(config.msg); break; }
                    case "log": { console.log(config.msg); break; }
                    case "warn": { console.warn(config.msg); break; }
                }
            },


            /**
            * @descrição: Aplica máscara para os elementos de um form ou para o próprio elemento passado como parâmetro
            * @params: elHTML: pode ser uma string, representando o id de um elemento (no caso o id de um form) ou um próprio elemento HTML
            * @return: void
            **/
            Mascara: function (elHTML/**, adicionarAtributoPlaceHolder **/) {
                var f = null;

                // verifica se o elemento passado é uma string ou um próprio elemento HTML
                if (typeof elHTML == "string") {
                    // obtém todos os elementos que possuem máscaras
                    f = document.querySelectorAll("#" + elHTML + " input[mask]");
                } else {
                    f = Array();
                    f.push(elHTML)
                }

                if ((f == null) && (f.length == 0)) {
                    return;
                }

                var adicionarAtributoPlaceHolder = arguments[1];

                // pode indicar os atributos:
                // placeholder => se não for indicado, o placeholder será o mesmo da máscara, porém substituindo o '9' por '_'
                // addPlaceholder => por default é true, se não quiser adicionar placeholder, colocar o atributo 'addPlaceholder' como false
                /*var arrMask = [
                { tipo: "cep", mask: "99999-999" },
                { tipo: "cep", mask: "999.999.999-99" },
                { tipo: "dd/mm/aaaa", mask: "99/99/9999" },
                { tipo: "dd/mm", mask: "99/99" },
                { tipo: "mm/aaaa", mask: "99/9999" },
                { tipo: "
                ];*/

                // importante adicionar o espaço no final
                var moeda = Prion.settings.Moeda.simbolo + " ";


                for (var i = 0; i < f.length; i++) {
                    // obtém o elemento da iteração atual
                    var elemento = f[i],
                        elementoJ = null;

                    // obtém o tipo da máscara
                    var tipo = elemento.getAttribute("mask");
                    if (tipo == null) { continue; }

                    elementoJ = $(elemento);
                    elemento.removeAttribute("placeholder");

                    //Retira a máscara de dinheiro,inserida através do plugin "Price Format jQuery Plugin"
                    elementoJ.unpriceFormat();

                    //Retira as demais máscaras, inseridas pelo plugin "jquery.mask.js"
                    elementoJ.unmask();

                    switch (tipo.toLowerCase()) {
                        case "cep":
                            {
                                var maskStr = (Prion.settings.Mask != null) ? (Prion.settings.Mask.cep || "99999-999") : "99999-999",
                                    placeHolder = (maskStr == "99999-999") ? "_____-___" : "__.___-___";

                                elementoJ.mask(maskStr);
                                elemento.setAttribute("placeholder", placeHolder);
                                break;
                            }
                        case "cpf":
                            {
                                elementoJ.mask("999.999.999-99");
                                elemento.setAttribute("placeholder", "___.___.___-__");

                                break;
                            }
                        case "cnpj":
                        {
                            elementoJ.mask("99.999.999/9999-99");
                            elemento.setAttribute("placeholder", "__.___.___/____-__");

                            break;
                        }
                        case "dd/mm/aaaa":
                            {
                                elementoJ.mask("99/99/9999");
                                elemento.setAttribute("placeholder", "__/__/____");
                                break;
                            }
                        case "dd/mm":
                            {
                                elementoJ.mask("99/99");
                                elemento.setAttribute("placeholder", "__/__");
                                break;
                            }
                        case "mm/aaaa":
                            {
                                elementoJ.mask("99/9999");
                                elemento.setAttribute("placeholder", "__/____");
                                break;
                            }
                        case "hh:mm:ss":
                            {
                                elementoJ.mask("99:99:99");
                                elemento.setAttribute("placeholder", "__:__:__");
                                break;
                            }
                        case "dd/mm/aaaa hh:mm":
                            {
                                elementoJ.mask("99/99/9999 99:99");
                                elemento.setAttribute("placeholder", "___.___.___-__");
                                break;
                            }
                        case "money":
                            {
                                elementoJ.priceFormat({ prefix: moeda, centsSeparator: ",", thousandsSeparator: "." });
                                elemento.setAttribute("placeholder", moeda);
                                break;
                            }
                        case "percent":
                            {
                                elementoJ.mask('99.99%');
                                elemento.setAttribute("placeholder", "%");
                                break;
                            }
                        case "integer":
                            {
                                Prion.Event.add(elemento, "keypress", function (evt) {
                                    Prion.Validate.NumberOnly(this, evt, false);
                                });
                                break;
                            }
                        case "telefone_fixo":
                            {
                                elementoJ.mask("(99) 9999-9999");
                                elemento.setAttribute("placeholder", "(__)____-____");

                                break;
                            }
                        case "telefone_movel":
                            {
                                elementoJ.mask("(99) 99999-9999");
                                elemento.setAttribute("placeholder", "(__)_____-____");

                                break;
                            }
                        case "inscricao_estadual_rs":
                            {
                                elementoJ.mask("999-9999999");
                                elemento.setAttribute("placeholder", "___-_______");

                                break;
                            }
                            case "inscricao_estadual_sc":
                            {
                                elementoJ.mask("999.999.999");
                                elemento.setAttribute("placeholder", "___.___.___");

                                break;
                            }
                            case "inscricao_estadual_pr":
                            {
                                elementoJ.mask("99999999-99");
                                elemento.setAttribute("placeholder", "________-__");

                                break;
                            }
                            case "inscricao_estadual_sp":
                            {
                                elementoJ.mask("999.999.999.999");
                                elemento.setAttribute("placeholder", "___.___.___.___");

                                break;
                            }
                            case "inscricao_estadual_mg":
                            {
                                elementoJ.mask("999.999.999/9999");
                                elemento.setAttribute("placeholder", "___.___.___/____");

                                break;
                            }
                            case "inscricao_estadual_rj":
                            {
                                elementoJ.mask("99.999.99-9");
                                elemento.setAttribute("placeholder", "__.___.__-_");

                                break;
                            }
                            
                            case "inscricao_estadual_ba":
                            case "inscricao_estadual_es":
                            {
                                elementoJ.mask("999.999.99-9");
                                elemento.setAttribute("placeholder", "___.___.__-_");

                                break;
                            }
                            case "inscricao_estadual_se":
                            {
                                elementoJ.mask("999999999-9");
                                elemento.setAttribute("placeholder", "_________-_");

                                break;
                            }   
                            case "inscricao_estadual_pe":
                            {
                                elementoJ.mask("99.9.999.9999999-9");
                                elemento.setAttribute("placeholder", "__._.___._______-_");

                                break;
                            }
                            case "inscricao_estadual_rn":
                            {
                                elementoJ.mask("99.999.999-9");
                                elemento.setAttribute("placeholder", "__.___.___-_");

                                break;
                            }
                            case "inscricao_estadual_pi":
                            case "inscricao_estadual_ma":
                            case "inscricao_estadual_al":
                            case "inscricao_estadual_mt":
                            case "inscricao_estadual_ms":
                            case "inscricao_estadual_ap":
                            {
                                elementoJ.mask("999999999");
                                elemento.setAttribute("placeholder", "_________");

                                break;
                            }
                           
                            case "inscricao_estadual_ce":
                            case "inscricao_estadual_rr":
                            {
                                elementoJ.mask("99999999-9");
                                elemento.setAttribute("placeholder", "________-_");

                                break;
                            }
                            case "inscricao_estadual_go":
                            {
                                elementoJ.mask("99.999.999-9");
                                elemento.setAttribute("placeholder", "___-_______");

                                break;
                            }
                            case "inscricao_estadual_to":
                            {
                                elementoJ.mask("99999999999");
                                elemento.setAttribute("placeholder", "___________");

                                break;
                            }
                            
                            case "inscricao_estadual_df":
                            {
                                elementoJ.mask("99999999999-99");
                                elemento.setAttribute("placeholder", "___________-__");

                                break;
                            }
                            case "inscricao_estadual_am":
                            {
                                elementoJ.mask("99.999.999-9");
                                elemento.setAttribute("placeholder", "__.___.___-_");

                                break;
                            }
                            case "inscricao_estadual_ac":
                            {
                                elementoJ.mask("99.999.999/999-99");
                                elemento.setAttribute("placeholder", "__.___.___/___-__");

                                break;
                            }
                            case "inscricao_estadual_pa":
                            case "inscricao_estadual_ro":
                            {
                                elementoJ.mask("99-999999-9");
                                elemento.setAttribute("placeholder", "__-______-_");

                                break;
                            }                                                  
                    }
                }
            },


            Mascara2: function (str, mask) {

                if ((typeof str == "string") && ((str == "") || (str == null))) {
                    return str;
                }

                if ((mask == "") || (mask == null)) {
                    return str;
                }

                switch (mask.toLowerCase()) {
                    case "cpf":
                        {
                            str = str.replace(/\D/g, ""); //Remove tudo o que não é dígito
                            str = str.replace(/(\d{3})(\d)/, "$1.$2"); //Coloca um ponto entre o terceiro e o quarto dígitos
                            str = str.replace(/(\d{3})(\d)/, "$1.$2"); //Coloca um ponto entre o terceiro e o quarto dígitos

                            //de novo (para o segundo bloco de números)
                            str = str.replace(/(\d{3})(\d{1,2})$/, "$1-$2"); //Coloca um hífen entre o terceiro e o quarto dígitos
                            return str;
                        }

                    case "dd/mm/aaaa":
                        {
                            return Prion.Format(str, mask);
                        }

                    case "money":
                        {
                            str = parseFloat(str);
                            str = str.format(2, ",", ".");
                            str = Prion.settings.Moeda.simbolo.trim() + " " + str;

                            return str;
                        }
                }

                return str;
            },

            /**
            * @descrição: Exibe o retorno de um request
            * @param config = idEl: id do elemento que receberá o retorno da requisição
            *               = timer: tempo (em milisegundos) que a mensagem ficará visível
            *               = mensagem: TextoMensagem: mensagem que será exibida no elemento (idEl)
            *               =         : ClassName: classe que será atribuida ao elemento(idEl)
            **/
            Mensagem: function (config) {
                var idEl = ((config.mensagem.idEl == null) || (config.mensagem.idEl.trim() == "")) ? "#divMensagem" : config.mensagem.idEl;
                var ocultar = (config.hide == null) ? true : config.hide;

                // se o timer não for definido, define 5000 (igual a 5 segundos) como default
                var timer = (config.mensagem.timer == null) ? 5000 : config.timer;

                // exibe o elemento
                $(idEl).css("display", "block");

                // exibe o elemento child dele que possui o className="albox"
                $(idEl + " .albox").css("display", "block");

                // pega o primeiro elemento SPAN e define nele o conteudo da mensagem
                $(idEl + " span:first-child").html(config.mensagem.TextoMensagem.trim());

                // adiciona o css ao elemento idEl
                if (config.mensagem.ClassName != null) {
                    $(idEl + " div div").removeClass("succesbox errorbox warningbox informationbox").addClass(config.mensagem.ClassName);
                }

                // pega o primeiro elemento A e regista uma função de fadeOut no botão de fechar da mensagem
                // $(idEl + " a:first-child");
                $(idEl + " a").click(function () { $(idEl).fadeOut(); return false; });


                // verifica se é para ocultar a mensagem
                if (ocultar) {

                    // oculta a mensagem após 5 segundos
                    var idTimer = setTimeout(function () { $(idEl).fadeOut(); }, timer);

                    // registra o evento mouseover no elemento idEl
                    // se o usuário passar o mouse em cima do elemento, o timer é stopado. A mensagem então não some
                    $(idEl).mouseover(function () {
                        if (idTimer != null) {
                            Prion.Log({ msg: "MouseOver: " + idTimer });

                            clearTimeout(idTimer);
                            idTimer = null;
                        }
                    });

                    // registra o evento mouseout no elemento idEl
                    // se o usuário tirar o mouse de cima do elemento, o timer iniciará novamente e a mensagem sumirá.
                    $(idEl).mouseout(function () {
                        Prion.Log({ msg: "MouseOut: " + idTimer });
                        idTimer = setTimeout(function () { $(idEl).fadeOut(); }, timer);
                    });
                }
            },


            /**
            * @descrição: Define o objeto na interface
            * @params: el => elemento que irá receber os dados do objeto
            * @params: objects => objetos com o qual a janela esta trabalhando
            * @params: obj => objeto que será utilizado para preencher a janela
            * @params: runDependence => arry de objetos que conterá uma lista de dependencias
            * @return: void
            **/
            ObjectToForm: function (el, objects, obj, runDependence) {
                _definirDadosObj(el, objects, obj, runDependence);
            },

            /**
            * @descrição:
            * @return: void
            **/
            PlaceHolder: function (config) {
                if (config == null || config.id == null || config.id.trim() == "" || config.focus == null || config.blur == null) {
                    return;
                }

                var listaIds = config.id.split(","),
                    listaValues = config.valueDefault.split(",");

                if (listaIds == null || listaValues == null) {
                    return;
                }

                for (var i = 0; i < listaIds.length; i++) {
                    var idAtual = "#" + listaIds[i].replace("#", "").trim(),
                        valueAtual = listaValues[i];

                    (function (id, vDefault) {
                        var cfgDefault = {
                            value: vDefault.trim(),
                            style: {
                                color: config.blur.color
                            }
                        };

                        var jsonDefault = JSON.stringify(cfgDefault);

                        $(id).val(vDefault.trim()).css({ color: "#" + config.blur.color.replace("#", "") }).attr("valuedefault", jsonDefault);

                        $(id).focus(function () {
                            $(this).css({
                                color: "#" + config.focus.color.replace("#", "")
                            });

                            if ($(this).val().trim().toLowerCase() == vDefault.trim().toLowerCase()) {
                                $(this).val("");
                            }

                            if (config.focus.action != null) {
                                config.focus.action.call(this);
                            }
                        });

                        $(id).blur(function () {
                            if (($(this).val().trim() == "") || ($(this).val().trim().toLowerCase() == vDefault.trim().toLowerCase())) {
                                $(this).val(vDefault);

                                $(this).css({ color: "#" + config.blur.color.replace("#", "") });

                                if (config.blur.action != null) {
                                    config.blur.action.call(this);
                                }
                            }
                        });
                    })(idAtual, valueAtual);
                }
            },


            /**
            * @descrição: Define o título da página
            **/
            Titulo: function (config) {
                if (Prion.Theme != null) {
                    Prion.Theme[Prion.settings.theme].Titulo(config);
                }
            },

            /**
            * @autor: Thiago Motta Zappaterra
            * @email: tmottaz@gmail.com
            * @descrição: Faz uma requisição ajax utilizando jQuery
            * @params: config => form: id do form (opcional). Caso tenha sido informado, captura todos os elementos dele
            *          config => url: url que será chamada
            *          config => type: string (opcional. Default = POST). Indica o a forma como os dados serão enviados (xml, json, script, ou html)
            *          config => success: function (opcional) que será executada após a requisição, somente se foi com sucesso
            *          config => error: function (opcional) que será executada quando houver algum erro na requisição
            **/
            Request: function (config) {
                var strForm = "";
                var nameForm = "";
                var objForm = null;

                // Caso o nome do form tenha sido informado, captura todos os valores contidos nele.
                if (config.form != null) {
                    var f = "#" + config.form.replace("#", "");
                    nameForm = f;

                    // Se o form não existir, exibe um alert, apenas em modo debug
                    if (0 == $(f).length) {
                        Prion.Log({ msg: "O form " + f + " não existe. Verifique se o nome está correto!", type: "error" });
                        return;
                    }

                    // transforma o form em object
                    if (Prion.FormToObject != null) {
                        objForm = Prion.FormToObject(nameForm.replace("#", ""), false);
                    } else {
                        strForm += $(f).serialize();
                    }
                }

                // se o parâmetro config.obj for do tipo string, transforma para object
                if ((typeof config.obj == "string") && (config.obj.trim() != "")) {
                    config.obj = Prion.StringToObject(config.obj);
                }

                // se o parâmetro config.data for do tipo string, transforma para object
                if ((typeof config.data == "string") && (config.data.trim() != "")) {
                    config.data = Prion.StringToObject(config.data);
                }


                var type = (config.type == null) ? "POST" : config.type;

                // chama a função fnBeforeLoad, apenas se existir
                if ((config.fnBeforeLoad != null) && (typeof config.fnBeforeLoad == "function")) {
                    config.fnBeforeLoad.call(this);
                }


                if (objForm != null) {
                    objForm = Prion.Apply(objForm, config.obj);
                    objForm = Prion.Apply(objForm, config.data);

                    // modifica os atributos contidos em replaceData
                    objForm = _requestReplaceData(objForm, config);

                    // modifica o estado do objeto de acordo com o campo que possui o atributo "primary-key"=true
                    objForm = _changeStateObject(objForm, nameForm);
                } else {
                    objForm = config.data;
                }


                $.ajax({
                    type: "POST",
                    url: config.url,
                    data: objForm,
                    error: function (xhr, status, error) {
                        Prion.Erro({ response: "", status: status, xhr: xhr, url: config.url });

                        // verifica se error é != null e se é do tipo function
                        if ((config.error != null) && (typeof config.error == "function")) {
                            config.error.call(this);
                        }
                    },
                    success: function (retorno) {

                        // cria o atributo clearForm. 
                        var clearForm = ((config.clearForm != null) && (config.clearForm));

                        if (clearForm) {
                            Prion.ClearForm(f);
                        }

                        if (typeof retorno === "string") {
                            // verifica se success é != null e se é do tipo function
                            if ((config.success !== null) && (typeof config.success === "function")) {
                                config.success.call(this, retorno, true);
                            }

                            return;
                        }


                        // verifica se é para redirecionar para outra página
                        if ((retorno.isRedirect != null) && (retorno.isRedirect)) {
                            // redireciona para a URL
                            window.location.href = retorno.redirectTo;

                            if (config.success != null) {
                                if (typeof config.success == "function") {
                                    config.success.call(this);
                                }
                            }

                            return;
                        }

                        // só irá exibir a mensagem se existir o objeto
                        if (retorno.mensagem != null) {

                            var exibirAlert = false;

                            // verifica o tipo do form. Se for window, exibe um alert com o erro
                            if ((config.form != null) && (($(config.form).attr("tipo") != null) && ($(config.form).attr("tipo") == "window"))) {
                                exibirAlert = true;
                            }

                            // se for para exibir um alert
                            if (exibirAlert) {

                                // verifica se existe a mensagem para ser exibida
                                if ((retorno.mensagem != null) && (retorno.mensagem.TextoMensagem != null) && (retorno.mensagem.TextoMensagem != "")) {
                                    alert(retorno.mensagem.TextoMensagem);
                                } else {
                                    // se for para dar em alert, porém não existir a mensagem, exibe uma genérica!
                                    alert("E aí intranet... Deu erro, mas porque você não exibiu?? Mistério!!");
                                }
                            } else {
                                // se não for para exibir alert, exibe a mensagem em uma div
                                Prion.Mensagem({ mensagem: retorno.mensagem });
                            }
                        }


                        // verifica se houve erro na requisicao...
                        if ((retorno.success != null) && (!retorno.success)) {
                            Prion.Log({ msg: "Houve erro na requisição...", type: "error" });

                            // verifica se existe a função de erro no parametro de entrada...
                            if (config.error != null) {
                                config.error.call(this, retorno);
                            }
                        } else {
                            // SE CHEGOU AQUI, É PORQUE HOUVE SUCESSO NA REQUISIÇÃO


                            // verifica se possui o obj
                            if (retorno.obj != null) {
                                Prion.ObjectToForm(config.el, config.object, retorno.obj);
                            }


                            if (config.el != null) {
                                // obtém todos os forms carregados para o elemento
                                var forms = $("#" + config.el + " form");

                                if ((forms != null) && (forms.length >= 1)) {
                                    for (var i = 0; i < forms.length; i++) {
                                        Prion.Mascara(forms[i].id, true);
                                    }
                                }
                            }


                            // verifica se success é != null e se é do tipo function
                            if ((config.success != null) && (typeof config.success == "function")) {
                                // executa a função passando o objeto retorno como parametro
                                if (config.observers != null) {
                                    retorno.observers = config.observers;
                                }

                                var registroNovo = true;
                                registroNovo = ((!isNull(EstadoObjeto)) && (retorno.mensagem != null) && (retorno.mensagem.EstadoObjeto != null) && (retorno.mensagem.EstadoObjeto == EstadoObjeto.Novo));

                                config.success.call(this, retorno, registroNovo); //retorno);
                            }
                        }
                    }
                });

                return false;
            },

            ScrollBarWidth: function () {
                document.body.style.overflow = "hidden";
                var width = document.body.clientWidth;
                document.body.style.overflow = "scroll";
                width -= document.body.clientWidth;
                if (!width) width = document.body.offsetWidth - document.body.clientWidth;
                document.body.style.overflow = "";

                return width;
            },

            SetTopBarraRolagem: function (element, top) {
                var el = document.querySelector(element);
                if (el != null) { el.scrollTop = top; }
            },


            /**
            * @descrição: serializa um objeto passando-o para formato de URL
            **/
            SerializeObject: function (obj, prefix) {
                var str = [];

                for (var p in obj) {
                    var k = (prefix) ? prefix + "." + p : p; //prefix ? prefix + "[" + p + "]" : p, 
                    var v = obj[p];

                    str.push(typeof v == "object" ?
                                Prion.SerializeObject(v, k) :
                                encodeURIComponent(k) + "=" + encodeURIComponent(v));
                }

                return str.join("&");
            },


            SerializeForm: function (idForm) {
                if ((idForm == "") || (idForm == null)) {
                    return;
                }

                var form = document.getElementById(idForm);
                if (form == null) {
                    return;
                }

                var i, j, q = [];

                for (i = form.elements.length - 1; i >= 0; i = i - 1) {
                    if (form.elements[i].name === "") {
                        continue;
                    }

                    switch (form.elements[i].nodeName) {
                        case "INPUT":
                            switch (form.elements[i].type) {
                                case "text":
                                case "hidden":
                                case "password":
                                case "button":
                                case "reset":
                                case "submit":
                                    q.push(form.elements[i].name + "=" + encodeURIComponent(form.elements[i].value));
                                    break;
                                case "checkbox":
                                case "radio":
                                    if (form.elements[i].checked) {
                                        q.push(form.elements[i].name + "=" + encodeURIComponent(form.elements[i].value));
                                    }
                                    break;
                                case "file":
                                    break;
                            }
                            break;
                        case "TEXTAREA":
                            q.push(form.elements[i].name + "=" + encodeURIComponent(form.elements[i].value));
                            break;
                        case "SELECT":
                            switch (form.elements[i].type) {
                                case "select-one":
                                    q.push(form.elements[i].name + "=" + encodeURIComponent(form.elements[i].value));
                                    break;
                                case "select-multiple":
                                    for (j = form.elements[i].options.length - 1; j >= 0; j = j - 1) {
                                        if (form.elements[i].options[j].selected) {
                                            q.push(form.elements[i].name + "=" + encodeURIComponent(form.elements[i].options[j].value));
                                        }
                                    }
                                    break;
                            }
                            break;
                        case "BUTTON":
                            switch (form.elements[i].type) {
                                case "reset":
                                case "submit":
                                case "button":
                                    q.push(form.elements[i].name + "=" + encodeURIComponent(form.elements[i].value));
                                    break;
                            }
                            break;
                    }
                }

                return q.join("&");
            },


            /**
            * @descrição: recebe uma string por parâmetro e transforma em um object
            * @return: object
            **/
            StringToObject: function (query) {
                var query_string = {};

                query = (query.substring(0, 1) == "?") ? query.substring(1) : query;
                var vars = query.split("&");

                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split("=");

                    pair[0] = decodeURIComponent(pair[0]);
                    pair[1] = decodeURIComponent(pair[1]);

                    // If first entry with this name
                    if (typeof query_string[pair[0]] === "undefined") {
                        query_string[pair[0]] = pair[1];
                        // If second entry with this name
                    } else if (typeof query_string[pair[0]] === "string") {
                        var arr = [query_string[pair[0]], pair[1]];
                        query_string[pair[0]] = arr;
                        // If third or later entry with this name
                    } else {
                        query_string[pair[0]].push(pair[1]);
                    }
                }

                return query_string;
            },


            /**
            * @descrição: 
            * @return: void
            **/
            hasClass: function (ele, cls) {
                var existe = ele.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
                return ((existe == null) ? false : true);
            },

            /**
            * @descrição: 
            * @return: void
            **/
            addClass: function (ele, cls) {
                if (!this.hasClass(ele, cls)) {
                    if (ele.className.trim() == "") { ele.className = cls; }
                    else { ele.className += " " + cls; }
                }
            },

            /**
            * @descrição: 
            * @return: void
            **/
            removeClass: function (ele, cls) {
                if (this.hasClass(ele, cls)) {
                    var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
                    ele.className = ele.className.replace(reg, " ");
                    ele.className = ele.className.trim();
                }
            },


            renameProperty: function (el, oldName, newName) {
                if (typeof el == "string") { el = document.getElementById(el); }
                if (el == null) { return; }

                var valor = el.getAttribute(oldName);
                el.removeAttribute(oldName);
                el.setAttribute(newName, valor);
            }
        }
    } ());


    /**
    * @descrição: ENUMs que representa o estado de um objeto
    **/
    EstadoObjeto = {};
    EstadoObjeto.Novo = 0;
    EstadoObjeto.Alterado = 1;
    EstadoObjeto.Excluido = 2;
    EstadoObjeto.Consultado = 3;


    /**
    * @descrição: ENUMs com tipos de log
    **/
    showLog = {};
    showLog.Lista = "Lista";
    showLog.Window = "Window";
    showLog.Creator = "Creator";
    showLog.PrionExec = "PrionExec";
    showLog.Loader = "Loader";


    /**
    * @descrição: Array de objetos de qual caracter deve substituir seu par com acentos
    **/
    var specialChars = [
        { val: "a", let: "áàãâä" },
        { val: "e", let: "éèêë" },
        { val: "i", let: "íìîï" },
        { val: "o", let: "óòõôö" },
        { val: "u", let: "úùûü" },
        { val: "c", let: "ç" },
        { val: "A", let: "ÁÀÃÂÄ" },
        { val: "E", let: "ÉÈÊË" },
        { val: "I", let: "ÍÌÎÏ" },
        { val: "O", let: "ÓÒÕÔÖ" },
        { val: "U", let: "ÚÙÛÜ" },
        { val: "C", let: "Ç" },
        { val: "", let: "?!()" }
    ];


    window.isNull = function (x) {
        if ((x == "undefined") || (x == null)) { return true; }
        else { return false; }
    };

    window.isObject = function (x) {
        if (!isNull(x)) {
            if (x.constructor == Object) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isFunction = function (x) {
        if (!isNull(x)) {
            if (x instanceof Function) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isBoolean = function (x) {
        if (!isNull(x)) {
            if (x.constructor == Boolean) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isArray = function (x) {
        if (!isNull(x)) {
            if (x.constructor == Array) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isString = function (x) {
        if (!isNull(x)) {
            if (x.constructor == String) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isDate = function (x) {
        if (!isNull(x)) {
            if (x.constructor == Date) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isNumber = function (x) {
        if (!isNull(x)) {
            if (!isNaN(x) && (x.constructor != Boolean) && (x.constructor != Array)) { return true; }
            else { return false; }
        }
        else { return false; }
    };

    window.isInteger = function (x) {
        if (!isNull(x)) {
            if (isNumber(x)) {
                if ((x % 1) == 0) { return true; }
                else { return false; }
            }
            else { return false; }
        }
        else { return false; }
    };



    Prion.Buttons = function () {
        return {
            /**
            * @descrição: altera o estado de um botão
            * @params: button => pode ser o ID (string) ou o próprio elemento HTML
            * @params: habilitar (boolean) => true/false indicando se o botão será ou não habilitado
            * @return: void
            **/
            AlterState: function (button, habilitar) {
                var el = (typeof button == "string") ? document.getElementById(button) : button;

                // verifica se o botão existe
                if (el == null) { return; }

                if (habilitar) {
                    // botão HABILITADO
                    // remove o atributo "disabled" e remove o css de botão desabilitado
                    el.setAttribute("disabled", false);
                    Prion.removeClass(el, "buttonDisabled");

                    return;
                }

                // marca o botão como disabled e define os css de botão desabilitado
                el.setAttribute("disabled", true);
                Prion.addClass(el, "buttonDisabled");
            }
        }
    } ();


    /**
    * @autor: Thiago Motta Zappaterra
    * @email: tmottaz@gmail.com
    * @descrição: Classe responsável por carregar e adicionar arquivos javascripts no head do documento, fazendo assim com que os arquivos apareçam para depuração
    * =================================
    * @data: 13/08/2012
    *       # pequena correção no objeto Prion.Loader
    *
    **/
    Prion.Loader = function () {
        /******************************************************************************************
        ** PRIVATE
        ******************************************************************************************/

        /******************************************************************************************
        ** PUBLIC
        ******************************************************************************************/
        return {
            /**
            * @descrição: Carrega um lista de JS para o head do documento. Evita cache de JavaScript
            * @params: lista
            * @exemplo 1: ["arquivo1.js", "arquivo2.js"]
            * @exemplo 2: ["arquivo1.js", {url: "arquivo2.js"}]
            * @exemplo 3: ["arquivo1.js", {url: "arquivo2.js", fn: function() { console.log("colocar aqui função que será executada após arquivo ser carregado"); } }]
            * @exemplo 4: {url: "arquivo2.js", fn: function() { console.log("colocar aqui função que será executada após arquivo ser carregado"); } }
            * @exemplo 5: "arquivo2.js"
            * @return: void
            **/
            Carregar: function (lista) {
                var lista2 = Array();


                // verifica se o parâmetro lista é do tipo string...
                if (typeof lista == "string") {
                    // se entrou aqui é porque o parâmetro lista é uma string

                    // se for, verifica se o parâmetro é vazio
                    if (lista.trim() == "") {
                        return;
                    }

                    lista2.push(lista);
                } else if (isArray(lista)) {
                    // se entrou aqui é porque o parâmetro lista é do tipo array

                    // verifica se possui algum elemento na lista
                    if (0 == lista.length) {
                        return;
                    }

                    lista2 = lista;
                } else if (isObject(lista)) {
                    // se entrou aqui é porque o parâmetro é um object

                    lista2.push(lista);
                }

                var doc = document.getElementsByTagName("head")[0];
                if (doc == null) { return; }

                /**
                * isso evita cache de javascript
                **/
                var build = (Prion.config.buildSistema == null) ? "" : Prion.config.buildSistema;
                build = ((build != null) && (build != "")) ? ("?" + build) : build;
                build = (Prion.config.noCache) ? build : "";

                var allScripts = doc.getElementsByTagName("script"); //document.head.children;
                var base = location.origin;
                var objeto = null, url = "", fnAfterLoad = ""; //, existe = false;


                for (var i = 0; i < lista2.length; i++) {
                    // existe = false;

                    // verifica se o arquivo já foi adicionado
                    for (var j = 0; j < allScripts.length; j++) {

                        // se não for do tipo script, continua...
                        if (allScripts[j].type.toLowerCase() != "text/javascript") {
                            continue;
                        }

                        if ((allScripts[j].src == null) || (allScripts[j].src == "")) {
                            continue;
                        }

                        if (typeof lista2[i] == "string") {
                            url = lista2[i];
                            fnAfterLoad = null;
                        } else {
                            url = lista2[i].url;
                            fnAfterLoad = lista2[i].fn;
                        }

                        if (allScripts[j].src.indexOf(url) > 0) {
                            allScripts[j].parentNode.removeChild(allScripts[j]);
                            //existe = true;
                            break;
                        }
                    }

                    ///if (existe) { continue; }


                    var script = document.createElement("script");
                    script.setAttribute("language", "javascript");
                    script.setAttribute("type", "text/javascript");
                    script.setAttribute("src", (url + build));
                    script.setAttribute("charset", "iso-8859-1");

                    if (fnAfterLoad != null) {
                        script.onload = function () {
                            Prion.Log({ msg: url, from: showLog.Loader });
                            fnAfterLoad.call(this);
                        }
                    }

                    doc.appendChild(script);
                }
            }
        };
    } ();


    Prion.Iniciar();

    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    // init with .net json
    Date.initWithJSON = function (value) {
        if (value == null) { return ""; }

        var time = value.replace(RegExp('"|\'', 'g'), '');
        time = time.replace(/\\?\/Date\((-?\d+)\)\\?\//, '$1');
        return new Date(parseInt(time));
    };

    // date format
    Date.Format = {
        // Some common format strings
        masks: {
            defaultValue: "ddd MMM dd yyyy HH:mm:ss",
            shortDate: "m/d/yy",
            mediumDate: "MMM d, yyyy",
            longDate: "MMMM d, yyyy",
            fullDate: "dddd, MMMM d, yyyy",
            shortTime: "h:mm TT",
            mediumTime: "h:mm:ss TT",
            longTime: "h:mm:ss TT Z",
            isoDate: "yyyy-MM-dd",
            isoTime: "HH:mm:ss",
            isoDateTime: "yyyy-MM-dd'T'HH:mm:ss",
            isoUtcDateTime: "UTC:yyyy-MM-dd'T'HH:mm:ss'Z'"
        },
        // Internationalization strings
        i18n: {
            dayNames: [
                "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
                "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
                ],
            monthNames: [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
                ]
        }
    };

    // format display
    // base on Date Format 1.2.3
    // http://blog.stevenlevithan.com/archives/date-time-format
    // (c) 2007-2009 Steven Levithan <stevenlevithan.com> MIT license
    Date.prototype.toFormat = function (mask, utc) {
        var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
            timezoneClip = /[^-+\dA-Z]/g,
            pad = function (val, len) {
                val = String(val);
                len = len || 2;
                while (val.length < len) val = "0" + val;
                return val;
            };

        // Regexes and supporting functions are cached through closure
        function DateFormat(date, mask, utc) {
            var dF = Date.Format;

            // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
            if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                mask = date;
                date = undefined;
            }

            // Passing date through Date applies Date.parse, if necessary
            date = date ? new Date(date) : new Date;
            if (isNaN(date)) throw SyntaxError("invalid date");

            mask = String(dF.masks[mask] || mask || dF.masks["defaultValue"]);

            // Allow setting the utc argument via the mask
            if (mask.slice(0, 4) == "UTC:") {
                mask = mask.slice(4);
                utc = true;
            }

            var _ = utc ? "getUTC" : "get",
                d = date[_ + "Date"](),
                D = date[_ + "Day"](),
                M = date[_ + "Month"](),
                y = date[_ + "FullYear"](),
                H = date[_ + "Hours"](),
                m = date[_ + "Minutes"](),
                s = date[_ + "Seconds"](),
                L = date[_ + "Milliseconds"](),
                o = utc ? 0 : date.getTimezoneOffset(),
                flags = {
                    d: d,
                    dd: pad(d),
                    ddd: dF.i18n.dayNames[D],
                    dddd: dF.i18n.dayNames[D + 7],
                    M: M + 1,
                    MM: pad(M + 1),
                    MMM: dF.i18n.monthNames[M],
                    MMMM: dF.i18n.monthNames[M + 12],
                    yy: String(y).slice(2),
                    yyyy: y,
                    h: H % 12 || 12,
                    hh: pad(H % 12 || 12),
                    H: H,
                    HH: pad(H),
                    m: m,
                    mm: pad(m),
                    s: s,
                    ss: pad(s),
                    l: pad(L, 3),
                    L: pad(L > 99 ? Math.round(L / 10) : L),
                    t: H < 12 ? "a" : "p",
                    tt: H < 12 ? "am" : "pm",
                    T: H < 12 ? "A" : "P",
                    TT: H < 12 ? "AM" : "PM",
                    Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                    o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                    S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                };

            return mask.replace(RegExp(/d{1,4}|M{1,4}|yy(?:yy)?|([HhmsTt])\1?|[LloSZ]|"[^"]*"|\'[^\']*'/g), function ($0) {
                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
            });
        }

        return DateFormat(this, mask, utc);
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/


    /**
    * @autor: Thiago Motta Zappaterra
    * @email: tmottaz@gmail.com
    * @descrição: Classe responsável por manipulação de elementos do tipo CHECKBOX
    **/
    Prion.CheckBox = {

        /**
        * @autor: Thiago Motta Zappaterra
        * @email: tmottaz@gmail.com
        * @data: 22/11/2011
        * @descricao: marca/desmarca (baseado no parâmetro novoEstado) todos os checkbox que possuem o mesmo name (baseado no parâmetro nameCheckBox)
        * @exemplo: Prion.CheckBox.Toogle("nameCheckBox", true);	
        **/
        Toogle: function (nomeCheckBox, novoEstado) {
            var el = document.getElementsByName(nomeCheckBox);
            if (el == null) { return; }

            for (var i = 0; i < el.length; i++) { el[i].checked = novoEstado; }
        }
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    Prion.Date = {
        /**
        * @descrição: Retorna o ano atual
        * @return: integer
        **/
        AnoAtual: function () {
            var dataStr = new Date();
            return (dataStr.getFullYear());
        },

        /**
        * @descrição: Retorna a data atual, no formato: dd/mm/aaaa
        * @return: data atual (string)
        **/
        DataAtual: function () {
            var dataStr = new Date();
            var dia = dataStr.getDate();
            var mes = (dataStr.getMonth()) + 1; //O mes começa em Zero, então soma-se 1
            var ano = dataStr.getFullYear();

            if (dia < 10) dia = "0" + dia;
            if (mes < 10) mes = "0" + mes;
            if (ano < 2000) ano = "19" + ano;

            dataStr = dia + "/" + mes + "/" + ano;
            return dataStr;
        },

        /**
        * @descrição: Retorna o nome do mês baseado no indice
        **/
        GetNomeMes: function (idMes) {
            var arr = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];

            //verifica se o parametro foi informado
            if (typeof idMes == "undefined") {
                var d = new Date();
                var idMes = d.getMonth();
            }

            return arr[idMes];
        }
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    /**
    * @autor: Thiago Motta Zappaterra
    * @email: tmottaz@gmail.com
    * @descrição: Classe responsável por adicionar/remover eventos a um objeto HTML (botão, textbox, window, scroll...)
    **/
    Prion.Event = function () {
        /******************************************************************************************
        ** PUBLIC
        ******************************************************************************************/
        return {
            /**
            * @autor: Thiago Motta Zappaterra
            * @email: tmottaz@gmail.com
            * @data: 22/11/2011
            * @descrição: Permite adicionar para, um ou mais objetos (element), uma ação (handler) para um determinado evento (type)
            * @params element => Pode ser um elemento HTML, um array de elementos HTML, ou um array de string representando o ID de cada elemento
            **/
            add: function (element, type, handler) {

                if (element == null) { return; }

                var arr = null;

                // verifica o tipo certo de element
                if (isObject(element)) {
                    arr = new Array();
                    arr.push(element);
                } else if (isArray(element)) {
                    arr = element;
                } else if (isString(element)) {
                    var l = element.split(",");
                    arr = new Array();

                    for (var i = 0; i < l.length; i++) {
                        if (l[i].trim() == "") { continue; }

                        var el = document.getElementById(l[i].trim());
                        if (el == null) { continue; }

                        arr.push(el);
                    }
                } else {
                    arr = new Array();
                    arr.push(element);
                }


                // se não existir nenhum elemento, sai fora...
                if ((arr == null) || (arr.length == 0)) { return; }

                for (var i = 0; i < arr.length; i++) {

                    var el = arr[i];
                    if (el == null) { continue; }

                    if (el.addEventListener) {
                        el.addEventListener(type, handler, false);
                    }
                    else {
                        // assign each event handler a unique ID
                        if (!handler.$$guid) handler.$$guid = addEvent.guid++;

                        // create a hash table of event types for the element
                        if (!el.events) el.events = {};

                        // create a hash table of event handlers for each element/event pair
                        var handlers = el.events[type];
                        if (!handlers) {
                            handlers = el.events[type] = {};

                            // store the existing event handler (if there is one)
                            if (el["on" + type]) { handlers[0] = el["on" + type]; }
                        }

                        // store the event handler in the hash table
                        handlers[handler.$$guid] = handler;

                        // assign a global event handler to do all the work
                        el["on" + type] = handleEvent;
                    }
                }
            },

            remove: function (element, type, handler) {
                if ((element == null) || (element == "")) { return; }
                if (typeof element == "string") { element = document.getElementById(element); }

                if (element.removeEventListener) { element.removeEventListener(type, handler, false); }
                else { if (element.events && element.events[type]) { delete element.events[type][handler.$$guid]; } }
            },

            handleEvent: function (event) {
                var returnValue = true;
                // grab the event object (IE uses a global event object)
                event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);

                // get a reference to the hash table of event handlers
                var handlers = this.events[event.type];

                // execute each event handler
                for (var i in handlers) {
                    this.$$handleEvent = handlers[i];
                    if (this.$$handleEvent(event) === false) { returnValue = false; }
                }
                return returnValue;
            },

            fixEvent: function (event) {
                // add W3C standard event methods
                event.preventDefault = fixEvent.preventDefault;
                event.stopPropagation = fixEvent.stopPropagation;
                return event;
            }
        };

        add.guid = 1;
        fixEvent.preventDefault = function () { this.returnValue = false; };
        fixEvent.stopPropagation = function () { this.cancelBubble = true; };
    } ();


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/


    Prion.Path = function () {
        /**********************************************************************************************
        ** PUBLIC
        **********************************************************************************************/
        return {

            /**
            * @descrição: combina uma ou mais strings com o separador de diretórios (/)
            * @return: novo caminho
            **/
            Combine: function () {
                var arr = Prion.Path.Combine.arguments;
                console.log(arr);
            },

            /**
            * @descrição: retorna o diretório de um arquivo
            **/
            Directory: function (filePath) {
                // windows
                if (filePath.indexOf("/") == -1) {
                    return filePath.substring(0, filePath.lastIndexOf('\\'));
                }

                // unix
                return filePath.substring(0, filePath.lastIndexOf('\\'));
            },

            /**
            * @descrição: retorna a extensão de um arquivo
            **/
            Extension: function (str) {
                return /[^.]+$/.exec(str);
            },

            /**
            * @descrição: Retorna o nome de um arquivo
            **/
            FileName: function (str) {
                if (str == null) {
                    return "";
                }

                return str.replace(/^.*(\\|\/|\:)/, '');
            }
        };

    } ();


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    Prion.RadioButton = function () {

        return {

            /**
            *	@descricao: gera uma string com todos os value dos radiobutton marcado com o mesmo name 
            *	@exemplo: $tmz.fn.RadioButton.GetValueSelected("nameRadioButton");	
            **/
            GetValueSelected: function (nomeRadioButton/**, returnObject**/) {
                if ((nomeRadioButton == null) || (nomeRadioButton.trim() == "")) { return; }

                var el = document.getElementsByName(nomeRadioButton);
                if (el == null) { return ""; }

                for (var i = 0; i < el.length; i++) {
                    if (el[i].checked) {

                        if ((arguments[1] != null) || (arguments[1] == true)) {
                            var o = {};
                            o.value = el[i].value;
                            o.id = el[i].id;
                            o.name = el[i].name;

                            return o;
                        } else {
                            return el[i].value;
                        }
                    }
                }

                return "";
            },

            /**
            *	@descricao: seleciona um ou mais radiobutton através do seu name baseado no value informado 
            *	@exemplo: Prion.RadioButton.SelectByValue("nameRadioButton", "1,2,3");	
            **/
            SelectByValue: function (nomeRadioButton, valueRadio) {
                if ((nomeRadioButton == null) || (nomeRadioButton.trim() == "")) { return; }
                if ((valueRadio == null) || (valueRadio.toString().trim() == "")) { return; }

                var el = document.getElementsByName(nomeRadioButton);
                if (el == null) { return; }

                var existeTheme = (Prion.Theme[Prion.settings.theme].RadioButton != null);

                for (var i = 0; i < el.length; i++) {
                    if (existeTheme) {
                        Prion.Theme[Prion.settings.theme].RadioButton.Reset(el[i]);
                    }

                    if (el[i].value == valueRadio) {
                        el[i].checked = true;

                        if (Prion.Theme[Prion.settings.theme].RadioButton != null) {
                            Prion.Theme[Prion.settings.theme].RadioButton.Checked(el[i]);
                        }

                        // só vai sair se não existir o theme
                        if (!existeTheme) {
                            return;
                        }
                    }
                }

                return;
            },

            /**
            * @descrição: Reseta um conjunto de radiobutton, e marca o default, passando também pela classe responsável pelo Theme
            * @return: void
            **/
            Reset: function (el/**, elChecked*/) {

                // verifica se o elemento foi informado
                if (el == null) { return; }

                var elChecked = (arguments[1] == null) ? null : arguments[1];

                // toma a ação dependendo do tipo do elemento
                if (typeof el == "string") {

                    if (elChecked != null) {
                        elChecked.setAttribute("checked", true);
                        if (Prion.Theme != null) { Prion.Theme[Prion.settings.theme].Checked(elChecked); }
                    }

                    el.removeAttribute("checked");

                    if (Prion.Theme != null) {
                        var e = document.getElementById(el);
                        Prion.Theme[Prion.settings.theme].RadioButton.Reset(e);
                    }

                } else {

                    // remove o checked de todos os radiobutton
                    for (var i = 0; i < el.length; i++) {
                        el[i].checked = false;
                        if (Prion.Theme != null) { Prion.Theme[Prion.settings.theme].RadioButton.Reset(el[i]); }

                        // se os values forem os mesmos 
                        if ((elChecked != null) && (el[i].value == elChecked.value)) {
                            el[i].checked = true;

                            if (Prion.Theme != null) { Prion.Theme[Prion.settings.theme].RadioButton.Checked(elChecked); }
                        }
                    }
                }
            }
        };
    } ();


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    // copiado de $tmz.fn.Utf8
    Prion.Utf8 = {

        // http://kevin.vanzonneveld.net
        // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +   improved by: sowberry
        // +    tweaked by: Jack
        // +   bugfixed by: Onno Marsman
        // +   improved by: Yves Sucaet
        // +   bugfixed by: Onno Marsman
        // +   bugfixed by: Ulrich
        // *     example 1: utf8_encode('função');
        // *     returns 1: 'funÃ§Ã£o'
        encode: function (argString) {
            var string = (argString + ''); // .replace(/\r\n/g, "\n").replace(/\r/g, "\n");
            var utftext = "", start, end, stringl = 0;

            start = end = 0;
            stringl = string.length;
            for (var n = 0; n < stringl; n++) {
                var c1 = string.charCodeAt(n);
                var enc = null;

                if (c1 < 128) { end++; }
                else if (c1 > 127 && c1 < 2048) { enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128); }
                else { enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128); }

                if (enc !== null) {
                    if (end > start) { utftext += string.slice(start, end); }
                    utftext += enc;
                    start = end = n + 1;
                }
            }

            if (end > start) { utftext += string.slice(start, stringl); }

            return utftext;
        },


        // http://kevin.vanzonneveld.net
        // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
        // +      input by: Aman Gupta
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +   improved by: Norman "zEh" Fuchs
        // +   bugfixed by: hitwork
        // +   bugfixed by: Onno Marsman
        // +      input by: Brett Zamir (http://brett-zamir.me)
        // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // *     example 1: utf8_decode('funÃ§Ã£o');
        // *     returns 1: 'função'
        decode: function (str_data) {
            var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;
            str_data += '';

            while (i < str_data.length) {
                c1 = str_data.charCodeAt(i);
                if (c1 < 128) {
                    tmp_arr[ac++] = String.fromCharCode(c1);
                    i++;
                } else if (c1 > 191 && c1 < 224) {
                    c2 = str_data.charCodeAt(i + 1);
                    tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = str_data.charCodeAt(i + 1);
                    c3 = str_data.charCodeAt(i + 2);
                    tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }

            return tmp_arr.join('');
        }
    };

    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    // copiado de $tmz.fn.Base64
    Prion.Base64 = {
        // http://kevin.vanzonneveld.net
        // +   original by: Tyler Akins (http://rumkin.com)
        // +   improved by: Thunder.m
        // +      input by: Aman Gupta
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +   bugfixed by: Onno Marsman
        // +   bugfixed by: Pellentesque Malesuada
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +      input by: Brett Zamir (http://brett-zamir.me)
        // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // -    depends on: utf8_decode
        // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
        // *     returns 1: 'Kevin van Zonneveld'
        // mozilla has this native
        // - but breaks in 2.0.0.12!
        //if (typeof this.window['btoa'] == 'function') {
        //    return btoa(data);
        //}
        decode: function (data) {
            var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
                    ac = 0,
                    dec = "",
                    tmp_arr = [];

            if (!data) {
                return data;
            }

            data += '';

            do { // unpack four hexets into three octets using index points in b64
                h1 = b64.indexOf(data.charAt(i++));
                h2 = b64.indexOf(data.charAt(i++));
                h3 = b64.indexOf(data.charAt(i++));
                h4 = b64.indexOf(data.charAt(i++));

                bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

                o1 = bits >> 16 & 0xff;
                o2 = bits >> 8 & 0xff;
                o3 = bits & 0xff;

                if (h3 == 64) {
                    tmp_arr[ac++] = String.fromCharCode(o1);
                } else if (h4 == 64) {
                    tmp_arr[ac++] = String.fromCharCode(o1, o2);
                } else {
                    tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
                }
            } while (i < data.length);

            dec = tmp_arr.join('');
            dec = Prion.Utf8.decode(dec);

            return dec;
        },

        // http://kevin.vanzonneveld.net
        // +   original by: Tyler Akins (http://rumkin.com)
        // +   improved by: Bayron Guevara
        // +   improved by: Thunder.m
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +   bugfixed by: Pellentesque Malesuada
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +   improved by: Rafal Kukawski (http://kukawski.pl)
        // -    depends on: utf8_encode
        // *     example 1: base64_encode('Kevin van Zonneveld');
        // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
        // mozilla has this native
        // - but breaks in 2.0.0.12!
        //if (typeof this.window['atob'] == 'function') {
        //    return atob(data);
        //}
        encode: function (data) {
            var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
                    ac = 0,
                    enc = "",
                    tmp_arr = [];

            if (!data) {
                return data;
            }

            data = Prion.Utf8.encode(data + '');

            do { // pack three octets into four hexets
                o1 = data.charCodeAt(i++);
                o2 = data.charCodeAt(i++);
                o3 = data.charCodeAt(i++);

                bits = o1 << 16 | o2 << 8 | o3;

                h1 = bits >> 18 & 0x3f;
                h2 = bits >> 12 & 0x3f;
                h3 = bits >> 6 & 0x3f;
                h4 = bits & 0x3f;

                // use hexets to index into b64, and append result to encoded string
                tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
            } while (i < data.length);

            enc = tmp_arr.join('');

            var r = data.length % 3;

            return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
        }
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/


    /**
    * build: 2013-01-21 14:42
    * author: Thiago Motta Zappaterra - tmottaz@gmail.com
    * ==========================================
    * configuração:
    * var abas = new Prion.Tabs({
    * id: "tabs1", // id do tabs
    * selected: 0, // qual aba ficará selecionada (sobrecarregar para aceitar por id
    * tabs: [ // (opcional) array de abas 
    *  {
    *      id: "tabMeusDados", // id da aba
    *      title: "Meus dados", // titulo da aba
    *      selected: true, // se true, indica que a aba ficará selecionada
    *      style: "height: 100px; width: 200px", // (opcional)
    *      action: { // ações
    *          onClick: function() { // (opcional) function que será executada quando clicar na aba
    *          } 
    *      }
    *  }]
    * }); 
    **/
    Prion.Tabs = function (configUser) {

        var _config = configUser;
        var _idAba = "";

        /**
        * oculta todas as divs desta aba
        **/
        var _clickDefault = function (item) {
            Prion.each(_idAba + " li", function (item2) {
                var id = item2.children[0].getAttribute("data");
                var div = document.getElementById(id);

                item2.removeClass("active");
                if (div != null) {
                    div.addClass("hide");
                    div.removeClass("selected");
                }
            });

            var id = item.children[0].getAttribute("data");
            var div = document.getElementById(id);
            item.addClass("active");

            if (div != null) {
                div.className += " selected";
                div.removeClass("hide");
            }
        };

        var _init = function () {
            // pega o ID da aba
            _idAba = "#" + _config.id.replace("#", "");

            // oculta todas as divs desta aba
            Prion.each(_idAba + " li", function (item) {

                var id = item.children[0].getAttribute("data");
                var div = document.getElementById(id);

                if (div != null) {
                    div.addClass("hide");
                }

                Prion.Event.add(item, "click", function () {
                    _clickDefault.call(this, item)
                });
            });


            // verifica se existe alguma aba
            if ((_config.tabs == null) || (_config.tabs.length == 0)) {
                return;
            }

            // obtém todos os LI
            var abas = document.querySelectorAll(_idAba + " li");
            if ((abas == null) || (abas.length == 0)) {
                return;
            }

            // deixa a primeira aba visível
            var id = abas[0].children[0].getAttribute("data");
            var div = document.getElementById(id);

            if (div != null) {
                div.removeClass("hide");
            }

            // varre todos os LI e define a descrição de todas os objetos de abas
            if (abas != null) {
                for (var i = 0; i < abas.length; i++) {
                    if (abas[i] == null) { continue; }
                    var text = abas[i].innerText;

                    if (_config.tabs[i] != null) {
                        _config.tabs[i].title = text;
                    } else {
                        _config.tabs.push({ title: text });
                    }
                }
            }

            // seleciona a aba
            if (_config.selected) {
                _setActive(_config.selected);
            }
        };

        /**
        * Reseta o CSS de todas as abas
        **/
        var _reset = function () {
            Prion.each(_idAba + " li", function (item) {
                item.removeClass("active");
            });

            Prion.each(_idAba + " .div", function (item) {
                item.removeClass("selected");
            });
        };


        /**
        * Ativa uma determinada aba
        **/
        var _setActive = function (indice) {
            _reset();

            var li = document.querySelectorAll(_idAba + " li");
            if ((li == null) || (li.length < indice)) {
                return;
            }

            var div = document.querySelectorAll(_idAba + " .div");
            if ((div == null) || (div.length < indice)) {
                return;
            }

            li[indice].addClass("active");
            li[indice].removeClass("hide");
            div[indice].addClass("selected");
            div[indice].removeClass("hide");
        };



        var _hide = function (indice) {
            _reset();

            var li = document.querySelectorAll(_idAba + " li");
            if ((li == null) || (li.length < indice)) {
                return;
            }

            var div = document.querySelectorAll(_idAba + " .div");
            if ((div == null) || (div.length < indice)) {
                return;
            }

            li.className = "hide";
            div.className = "hide";
        };

        _init();


        return {
            Create: function (arrConfig) {
                if ((arrConfig == null) || (arrConfig.length == 0)) {
                    return;
                }

                var domAbas = _config.id.getDom();
                if (domAbas == null) {
                    return;
                }

                var arrTemp = null;

                if (isObject(arrConfig)) {
                    arrTemp = [];
                    arrTemp.push(arrConfig);
                }

                var ul = domAbas.getElementsByClassName("ulTabs");

                // <li class=""><a data="tabEmail">Email personalizado</a></li>
                for (var i = 0; i < arrTemp.length; i++) {

                    var li = document.createElement("LI");
                    var a = document.createElement("A");
                    a.setAttribute("data", arrTemp[i].id);
                    a.innerText = arrTemp[i].title || "";

                    li.appendChild(a);

                    ul[0].appendChild(li);

                    var div = document.createElement("DIV");
                    div.id = arrTemp[i].id;
                    div.className = "div hide";
                    div.innerHTML = arrTemp[i].content;
                    if (arrTemp[i].style != null) {
                        div.style.cssText = arrTemp[i].style;
                    }

                    domAbas.appendChild(div);

                    Prion.Event.add(li, "click", function () {
                        _clickDefault.call(this, this)
                    });


                    if ((arrTemp[i].action != null) && (arrTemp[i].action.afterCreate != null)) {
                        arrTemp[i].action.afterCreate.call(this);
                    }
                }
            },

            Hide: function (idOrIndice) {
                _hide(idOrIndice);
            },

            Show: function (idOrIndice) {
                _setActive(idOrIndice);
            }
        }
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/


    /**
    * @descrição: Valida todos os campos de um form
    * @params nomeForm: nome do form
    * @return: true/false
    **/
    Prion.ValidateForm = function (nomeForm) {

        /**
        * @descrição: valida todos os inputs
        **/
        var _validateInput = function (form) {
            var ok = true;

            // obtém todos os elementos INPUT que possuem o atributo 'mandatory=true'
            var inputs = document.querySelectorAll(form + " input[mandatory=true]");

            // verifica se obteve algum elemento INPUT que é obrigatório
            if ((inputs == null) || (inputs.length == 0)) {
                return true;
            }


            for (var i = 0; i < inputs.length; i++) {
                var el = inputs[i];
                if (el == null) { continue; }

                // obtém o tipo do campo através do atributo fieldtype
                var tipo = el.getAttribute("fieldtype");

                // se não foi definido, define como 'string'
                tipo = (tipo == null) ? "string" : tipo;

                // obtém a mensagem que será exibida para o usuário
                var msg = el.getAttribute("message");
                msg = (msg == null) ? "" : msg;

                var value = "";

                // obtém o valor do input
                switch (el.tagName.toLowerCase()) {
                    case "input":
                        {
                            if (el.type.toLowerCase() == "checkbox") { value = el.checked; }
                            else { value = el.value.trim(); }
                        }
                }

                var attrDefault = el.getAttribute("valuedefault");
                var jsonDefault = (attrDefault == null) ? null : JSON.parse(attrDefault);

                // se existir algum value default...
                if (jsonDefault != null) {
                    if (value.toLowerCase() == jsonDefault.value.trim().toLowerCase()) {
                        ok = false;
                        continue;
                    }
                }

                // verifica o tipo do campo
                switch (tipo) {
                    case "string": // faz uma validação de string
                        {
                            if ((value == "") && (jsonDefault == null)) {
                                _showMessage(msg, el);
                                ok = false;
                            }

                            break;
                        }

                    case "date": // faz uma validação de date
                    case "datetime": // faz uma validação de datetime
                        {
                            if ((value == "") && (jsonDefault == null)) {
                                _showMessage(msg, el);
                                ok = false;
                            }

                            break;
                        }

                    case "email": // faz uma validação de email
                        {
                            if (jsonDefault == null) {
                                if (!Prion.Validate.Email(value)) {
                                    _showMessage(msg, el);
                                    ok = false;
                                }
                            }

                            break;
                        }
                }


                // obtém o atributo compare
                var compare = el.getAttribute("compare");
                if (compare == null) {
                    continue;
                }

                // se o atributo compare existir, localiza o elemento indicado nele
                var elCompare = document.getElementById(compare);
                if (elCompare == null) {
                    continue;
                }

                // verifica se o value do elemento atual é diferente do value do elemento indicado pelo compare
                if (value != elCompare.value.trim()) {
                    _showMessage(msg, elCompare);
                    ok = false;
                }
            }

            return ok;
        };


        /**
        * @descrição: valida todos os selects
        **/
        var _validateSelect = function (form) {
            var ok = true;

            // obtém todos os elementos SELECT que possuem o atributo 'mandatory=true'
            var selects = document.querySelectorAll(form + " select[mandatory=true]");

            if ((selects == null) || (selects.length == 0)) {
                return true;
            }

            for (var i = 0; i < selects.length; i++) {
                var s = selects[i];
                if (s == null) { continue; }

                if (Prion.ComboBox == null) {
                    continue;
                }

                var v = Prion.ComboBox.Get(s);
                var valueDefault = s.getAttribute("valuedefault");

                if (valueDefault != null) {
                    // transforma a string em object
                    valueDefault = JSON.parse(valueDefault);

                    if (valueDefault.value.toLowerCase().trim() != v.value.toLowerCase().trim()) {
                        continue;
                    }
                } else {
                    // se o usuário tiver selecionado algum valor, vai para o próximo
                    if (v.value.trim() != "") {
                        continue;
                    }
                }

                // define que o campo terá que ser preenchido
                ok = false;

                // obtém a mensagem que será exibida para o usuário
                var msg = s.getAttribute("message");
                _showMessage((msg || ""), s);
            }

            return ok;
        };


        /**
        * @descrição: valida todos os textarea
        **/
        var _validateTextArea = function (form) {
            var ok = true;

            var textarea = document.querySelectorAll(form + " textarea[mandatory=true]");

            if ((textarea == null) || (textarea.length == 0)) {
                return true;
            }


            for (var i = 0; i < textarea.length; i++) {
                var ta = textarea[i];
                if (ta == null) { continue; }

                var attr = ta.getAttribute("fieldtype");
                var isWysiwyg = ((attr != null) && (attr.toLowerCase() == "wysiwyg"));

                // se não for elemento do tipo wysiwyg...
                if (!isWysiwyg) {

                    // verifica se o campo esta vazio
                    if (ta.value.trim() == "") {
                        var msg = ta.getAttribute("message");
                        msg = (msg == null) ? "" : msg;

                        _showMessage(msg, ta);
                    }

                    continue;
                }

                var el = $("#" + ta.id);

                // se o elemento NÃO existir, vai para o próximo
                if (el == null) {
                    continue;
                }

                var value = el.wysiwyg('getContent').val();

                // se o usuário tiver colocado informação no campo, vai para o próximo
                if (value != "") {
                    continue;
                }

                // define que o campo terá que ser preenchido
                ok = false;

                var msg = ta.getAttribute("message");
                msg = (msg == null) ? "" : msg;

                _showMessage(msg, ta);
            }

            return ok;
        };


        /**
        * @descrição: Exibe a mensagem de validação de um campo baseada no tipo de validação do sistema.
        **/
        var _showMessage = function (msg/**, elemento**/) {

            switch (Prion.config.validateForm.tipo) {
                case "alert": { alert(msg); break; }
                case "theme":
                    {
                        if (Prion.Theme != null) { Prion.Theme[Prion.settings.theme].Validate(arguments[1]); }
                        break;
                    }
                case "prion":
                    {
                        var el = (arguments[1] != null) ? arguments[1] : null;
                        if (el == null) { return; }

                        // pega o parent!
                        var p = el.parentElement;

                        Prion.Log({ msg: "Validação: " + msg + " - campo: " + el, type: "warn" });
                        break;
                    }
            }
        };

        /**
        * @descrição: Efetua a validação
        **/
        var _init = function (nomeForm) {

            // verifica se o nome do form foi informado
            if ((nomeForm == "") || (nomeForm == null)) { return true; }

            // acerta o nome do form para ser utilizado na jQuery
            var f = (nomeForm.indexOf("#") >= 0) ? nomeForm : ("#" + nomeForm);
            var okInput = _validateInput(f);
            var okSelect = _validateSelect(f);
            var okTextArea = _validateTextArea(f);

            // variável de controle que indica se o form está OK ou não
            return (okInput && okSelect && okTextArea);
        };


        return _init(nomeForm);
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/

    Prion.Validate = {
        /**
        * @descrição: Verifica se o campo esta no formato de email
        * @return: boolean
        **/
        Email: function (field) {
            /*var re = /\S+@\S+\.\S+/;
            return re.test(field);*/
            
            var er = /^[a-zA-Z0-9][a-zA-Z0-9\._-]+@([a-zA-Z0-9\._-]+\.)[a-zA-Z-0-9]{2}/; 
            if ( !er.exec(field) ) {
                return false;
            }
            
            return true;
        },

        /**
        * @descrição: Faz um campo aceitar apenas números e espaço
        * @return: boolean
        **/
        NumberOnly: function (objeto, evento, aceitaEspaco) {
            var keypress = (window.event) ? event.keyCode : evento.which;

            if ((aceitaEspaco) && (32 == keypress)) { return; }

            if ((keypress != 13) && (keypress != 8) && (keypress != 0) && (keypress != 8) && (keypress != 0) && ((keypress < 48) || (keypress > 57))) {
                (window.event) ? event.returnValue = false : evento.preventDefault();
            }
        }
    };


    /**************************************************************************************************
    ***************************************************************************************************
    **************************************************************************************************/


    window.HTMLElement.extend({
        hasClass: function (_8a) {
            if (this.className == _8a) {
                return true
            }
            if ($typeOf(_8a) == "array") {
                _8a = "(" + _8a.join("|") + ")"
            }
            return new RegExp("(^| )" + _8a.escapeRegExp() + "($| )").test(this.className.toString())
        },

        addClass: function (_8b) {
            if (!this.hasClass(_8b)) {
                this.className += ((this.className ? " " : "") + _8b)
            }
            return this
        },
        removeClass: function (_8c) {
            this.className = this.className.replace(new RegExp("(^| )" + _8c.escapeRegExp() + "( |$)"), " ").trim();
            return this
        }

    });


    String.extend({
        escapeRegExp: function () {
            return this.replace(/([.*+?^${}()|[\]\\])/g, "\\$1")
        },

        getDom: function () {
            return document.getElementById(this);
        }
    });


    /**
    *  Javascript prototype - string.append("_","&")
    *  @autor: Thiago Motta Zappaterra
    *  @email: tmottaz@gmail.com
    *  @data: 08/11/2011
    *  @descricao: adiciona uma string no final de outra e utliza um separador (caso exista)
    *  @exemplo1: "teste".append("_","&");
    *  @return1: "teste_&"
    *  @exemplo2: "teste".append("_");
    *  @return1: "teste_";
    **/
    String.prototype.append = function (str/**, separador*/) {
        var s = (arguments[1] == null) ? "" : arguments[1];
        return this + ((this.length) ? s : '') + str;
    };

    /**
    * Javascript prototype - string.clear()
    * @autor: Thiago Motta Zappaterra
    * @email: tmottaz@gmail.com
    * @data: 03/08/2010
    * @descricao: limpa o conteudo de um campo
    * @exemplo: "idCampo".clear();	
    **/
    String.prototype.clear = function (/**clearHiddenFields**/) {
        var el = document.getElementById(this);
        if (el == null) { return ""; }

        var attr = el.getAttribute("valuedefault");
        var objDefault = JSON.parse(attr);
        var vDefault = (attr != null) ? objDefault.value : "";

        switch (el.tagName.toLowerCase()) {
            case "div": { el.textContent = vDefault || ""; break; }
            case "input": { el.value = vDefault || ""; break; }
            case "label": { el.innerHTML = vDefault || ""; break; }
            case "textarea": { el.value = vDefault || ""; break; }
            case "select":
                {
                    el.length = 0;
                    Prion.Theme.Cupcake.ComboBox.Reset(el);

                    // vai desabilitar os botões relacionados
                    var botoesRelacionados = el.getAttribute("data");
                    if (botoesRelacionados == null) {
                        return;
                    }

                    botoesRelacionados = JSON.parse(botoesRelacionados);
                    var arrBotoes = botoesRelacionados["buttons-disabled"].split(" ");
                    for (var i = 0; i < arrBotoes.length; i++) {
                        Prion.Buttons.AlterState(arrBotoes[i], false);
                    }
                    // FIM


                    break;
                }
            case "span": { el.innerHTML = vDefault || ""; break; }
            case "form":
                {
                    // este reset não limpa os input type=hidden
                    el.reset();

                    // verifica se é para limpar os campos hidden
                    var clearHidden = ((arguments[0] != null) && (arguments[0] == true));

                    if (clearHidden) {
                        var inputs = document.querySelectorAll("#" + el.id + " input[type=hidden]");

                        if ((inputs != null) && (inputs.length > 0)) {
                            for (var i = 0; i < inputs.length; i++) {
                                inputs[i].value = "";
                            }
                        }
                    }

                    break;
                }
        }

        // adiciona o atributos apenas se existir
        if ((objDefault != null) && (objDefault.style != null)) {
            for (var p in objDefault.style) {
                el.style.setProperty(p, objDefault.style[p]);
            }
        }
    };


    /**
    * Javascript prototype - string.format("valor 1", "valor 2", "valor 3")
    * "{0} is dead, but {1} is alive!".format("ASP", "ASP.NET")
    **/
    String.prototype.format = function () {
        var formatted = this;
        for (var arg in arguments) {
            formatted = formatted.replace("{" + arg + "}", arguments[arg]);
        }
        return formatted;
    };


    /**
    * Javascript prototype - string.getValue()
    * @autor: Thiago Motta Zappaterra
    * @email: tmottaz@gmail.com
    * @data: 07/04/2010
    * @descricao: retorna o value de um campo
    * @exemplo: "idCampo".getValue();	
    **/
    String.prototype.getValue = function () {
        var el = document.getElementById(this);
        if (el == null) { return ""; }

        switch (el.tagName.toLowerCase()) {
            case "input":
                {
                    if (el.type.toLowerCase() == "checkbox") { return el.checked; }
                    else { return el.value; }
                }
            case "label": { return el.innerHTML; }
            case "textarea": { return el.value; }
            case "select":
                {
                    // verifica se o objeto Prion.ComboBox existe
                    if (Prion.ComboBox == null) {
                        return el.value;
                    } else {
                        // se existir o objeto Prion.ComboBox, chama o método Get deste objeto
                        return Prion.ComboBox.Get(el);
                    }
                }
            case "span": { return el.innerHTML; }
            case "div": { return el.textContent; }
        }
    };


    /**
    *	Javascript prototype - string.replaceAll()
    *	@autor: Thiago Motta Zappaterra
    *	@email: tmottaz@gmail.com
    *	@data: 01/03/2010
    *	@descricao: realiza um replace all na string toda
    *	@exemplo: "teste".replaceAll("tes","TES");	
    **/
    String.prototype.replaceAll = function (de, para) {
        return this.replace(new RegExp(de, "g"), para);
    };



    /**
    * @descrição: Função para substituir caracteres especiais.
    * @return String
    */
    String.prototype.replaceSpecialChars = function () {
        var $spaceSymbol = '-';
        var regex;
        var returnString = this;

        for (var i = 0; i < specialChars.length; i++) {
            regex = new RegExp("[" + specialChars[i].let + "]", "g");
            returnString = returnString.replace(regex, specialChars[i].val);
            regex = null;
        }

        return returnString.replace(/\s/g, $spaceSymbol);
    };


    /**
    * Javascript prototype - string.setValue()
    * @autor: Thiago Motta Zappaterra
    * @email: tmottaz@gmail.com
    * @data: 03/08/2010
    * @descricao: altera o conteudo de um campo
    * @exemplo: "idCampo".setValue("conteudo");	
    **/
    String.prototype.setValue = function (conteudo) {
        var el = document.getElementById(this);
        if (el == null) {
            return "";
        }

        //se o conteudo não tiver sido definido, seta para VAZIO
        if (conteudo == undefined) {
            conteudo = "";
        }

        var mask = el.getAttribute("mask");
        if (mask != null) {
            conteudo = Prion.Mascara2(conteudo, mask);
        }

        switch (el.tagName.toLowerCase()) {
            case "input":
                {
                    if (el.type.toLowerCase() == "checkbox") {
                        el.checked = conteudo;
                        break;
                    }

                    if (el.type.toLowerCase() == "radio") {
                        Prion.RadioButton.SelectByValue(el.name, conteudo);
                        break;
                    }

                    el.value = conteudo;
                    break;
                }
            case "label": { el.innerText = conteudo; break; }
            case "textarea": { el.value = conteudo; break; }
            case "span": { el.innerHTML = conteudo; break; }
            case "div": { el.textContent = conteudo; break; }
            case "select":
                {
                    if ((Prion.ComboBox != null) && (Prion.ComboBox.SelecionarIndexPeloValue != null)) {
                        Prion.ComboBox.SelecionarIndexPeloValue(el, conteudo);

                        // vai desabilitar os botões relacionados
                        var botoesRelacionados = el.getAttribute("data");
                        if (botoesRelacionados == null) {
                            return;
                        }

                        botoesRelacionados = JSON.parse(botoesRelacionados);
                        var arrBotoes = botoesRelacionados["buttons-disabled"].split(" ");
                        for (var i = 0; i < arrBotoes.length; i++) {
                            Prion.Buttons.AlterState(arrBotoes[i], false);
                        }
                        // FIM
                    }
                }
        }
    };


    /**
    *	Javascript prototype - string.trim()
    *	@autor: Thiago Motta Zappaterra
    *	@email: tmottaz@gmail.com
    *	@data: 03/03/2010
    *	@descricao: remove todo o espaço vazio de uma string
    *	@exemplo: "teste".trim();	
    **/
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, "");
    };


    String.prototype.toDate = function (formatoAtual, formatoNovo) {
        var data = this.replaceAll("/", "-");
        var regexp, dateArray, newDate;

        switch (formatoAtual.replaceAll("/", "-")) {
            case "dd-mm-yyyy":
                {
                    regexp = /(\d{2})-(\d{2})-(\d{4})/;
                    dateArray = regexp.exec(data);
                    break;
                }
        }

        switch (formatoNovo.replaceAll("/", "-")) {
            case "yyyy-mm-dd":
                {
                    newDate = new Date(
                        (+dateArray[3]),
                        (+dateArray[2]) - 1, // Careful, month starts at 0!
                        (+dateArray[1])
                    );

                    break;
                }
        }

        return newDate;
    };


    /**
    * @descrição: transforma uma string do tipo money em um float
    **/
    String.prototype.toFloat = function () {
        var str = this.toString();

        if (typeof str == "string") {

            str = str.replace(".", "");
            str = str.replace(",", ".");
            str = str.trim().replace("R$", "").replace("U$", "").replace(/\+/g, '').trim();
            str = parseFloat(str);
        }

        return str;
    };


    /**
    * @descricao: transforma o primeiro caractere de toda string para MAIÚSCULO
    **/
    String.prototype.ucwords = function () {
        var str = this;
        return (str + '').replace(/^([a-z])|\s+([a-z])/g, function ($1) { return $1.toUpperCase(); });
    };


    /**
    *	@autor: Jonas Raoni Soares Silva
    *	@site: http://jsfromhell.com/string/pad [rev. #1]
    *	@descricao: preenche uma string (sem laço) com outra até atingir o tamanho informado
    *	@exemplo: alert("9".pad(2, "0", String.PAD_LEFT)); // exibe "09"
    **/
    String.PAD_LEFT = 0;
    String.PAD_RIGHT = 1;
    String.PAD_BOTH = 2;

    String.prototype.pad = function (l, s, t) {
        return s || (s = " "), (l -= this.length) > 0 ? (s = new Array(Math.ceil(l / s.length)
        + 1).join(s)).substr(0, t = !t ? l : t == String.PAD_RIGHT ? 0 : Math.ceil(l / 2))
        + this + s.substr(0, l - t) : this;
    };


    Array.fromList = function (list) {
        var array = new Array(list.length);
        for (var i = 0, n = list.length; i < n; i++) {
            array[i] = list[i];
        }

        return array;
    };

    /**
    * Javascript prototype
    * @exemplo: 
    *           var arr = [{num: 1,key:911},{num: 2,key:22},{num: 3,key:23},{num: 4,key:222},{num: 4,key:2222},{num: 2,key:2},{num: 1,key:29},{num: 3,key:26},{num: 4,key:24}];
    *           var grouped = arr.groupBy('num');
    *           console.log(grouped);
    **/
    Array.prototype.groupBy = function (property, valuesUser) {
        "use strict"; function deepCopy(p) {
            /*var c = {};

            for (var i in p) {
            if ((typeof p[i] === 'object') && (p[i] != null)) {
            c[i] = (p[i].constructor === Array) ? [] : {};
            deepCopy(p[i], c[i]);
            }
            else {
            c[i] = p[i];
            }
            }

            return c;*/
            var c = {};
            c = p;

            return c;
        }

        var arrValuesUser = valuesUser.split(",");
        var retarr = [];
        var len = this.length;

        for (var i = 0; i < len; i++) {
            var groupedlen = retarr.length, found = false;

            for (var j = 0; j < groupedlen; j++) {
                if (this[i][property] === retarr[j].key) {
                    retarr[j].values.push(deepCopy(this[i]));
                    found = true;
                    break;
                }
            }

            if (found === false) {
                var arrTemp = [], nome = "", obj = new Object();

                for (var k = 0; k < arrValuesUser.length; k++) {
                    nome = arrValuesUser[k];
                    obj[nome] = this[i][arrValuesUser[k]];

                }

                obj.key = this[i][property];
                obj.values = [];

                retarr.push(obj);
                retarr[retarr.length - 1].values.push(deepCopy(this[i]));
            }
        }

        return retarr;
    };


    /**
    * Javascript prototype
    * @exemplo: 
    * var numero = 2195440.3517;
    * alert(numero.format(2, ",", ".")); // exibe: "2.195.440,35"
    **/
    Number.prototype.format = function (d_len, d_pt, t_pt) {
        var d_len = d_len || 0;
        var d_pt = d_pt || ".";
        var t_pt = t_pt || ",";

        if ((typeof d_len != "number") || (typeof d_pt != "string") || (typeof t_pt != "string")) {
            throw new Error("wrong parameters for method 'String.pad()'.");
        }

        var integer = "", decimal = "";
        var n = new String(this).split(/\./), i_len = n[0].length, i = 0;

        if (d_len > 0) {
            n[1] = (typeof n[1] != "undefined") ? n[1].substr(0, d_len) : "";
            decimal = d_pt.concat(n[1].pad(d_len, "0", String.PAD_RIGHT));
        }

        while (i_len > 0) {
            if ((++i % 3 == 1) && (i_len != n[0].length)) {
                integer = t_pt.concat(integer);
            }

            integer = n[0].substr(--i_len, 1).concat(integer);
        }

        return (integer + decimal);
    };


    window.md5 = function(str) {
        // http://kevin.vanzonneveld.net
        // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
        // + namespaced by: Michael White (http://getsprink.com)
        // +    tweaked by: Jack
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +      input by: Brett Zamir (http://brett-zamir.me)
        // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // -    depends on: utf8_encode
        // *     example 1: md5('Kevin van Zonneveld');
        // *     returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'
        var xl;

        var rotateLeft = function (lValue, iShiftBits) {
            return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
        };

        var addUnsigned = function (lX, lY) {
            var lX4, lY4, lX8, lY8, lResult;
            lX8 = (lX & 0x80000000);
            lY8 = (lY & 0x80000000);
            lX4 = (lX & 0x40000000);
            lY4 = (lY & 0x40000000);
            lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
            if (lX4 & lY4) {
                return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
            }
            if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                    return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                } else {
                    return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                }
            } else {
                return (lResult ^ lX8 ^ lY8);
            }
        };

        var _F = function (x, y, z) {
            return (x & y) | ((~x) & z);
        };
        var _G = function (x, y, z) {
            return (x & z) | (y & (~z));
        };
        var _H = function (x, y, z) {
            return (x ^ y ^ z);
        };
        var _I = function (x, y, z) {
            return (y ^ (x | (~z)));
        };

        var _FF = function (a, b, c, d, x, s, ac) {
            a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));
            return addUnsigned(rotateLeft(a, s), b);
        };

        var _GG = function (a, b, c, d, x, s, ac) {
            a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));
            return addUnsigned(rotateLeft(a, s), b);
        };

        var _HH = function (a, b, c, d, x, s, ac) {
            a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));
            return addUnsigned(rotateLeft(a, s), b);
        };

        var _II = function (a, b, c, d, x, s, ac) {
            a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));
            return addUnsigned(rotateLeft(a, s), b);
        };

        var convertToWordArray = function (str) {
            var lWordCount;
            var lMessageLength = str.length;
            var lNumberOfWords_temp1 = lMessageLength + 8;
            var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
            var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
            var lWordArray = new Array(lNumberOfWords - 1);
            var lBytePosition = 0;
            var lByteCount = 0;
            while (lByteCount < lMessageLength) {
                lWordCount = (lByteCount - (lByteCount % 4)) / 4;
                lBytePosition = (lByteCount % 4) * 8;
                lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));
                lByteCount++;
            }
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
            lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
            lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
            return lWordArray;
        };

        var wordToHex = function (lValue) {
            var wordToHexValue = "",
          wordToHexValue_temp = "",
          lByte, lCount;
            for (lCount = 0; lCount <= 3; lCount++) {
                lByte = (lValue >>> (lCount * 8)) & 255;
                wordToHexValue_temp = "0" + lByte.toString(16);
                wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);
            }
            return wordToHexValue;
        };

        var x = [],
        k, AA, BB, CC, DD, a, b, c, d, S11 = 7,
        S12 = 12,
        S13 = 17,
        S14 = 22,
        S21 = 5,
        S22 = 9,
        S23 = 14,
        S24 = 20,
        S31 = 4,
        S32 = 11,
        S33 = 16,
        S34 = 23,
        S41 = 6,
        S42 = 10,
        S43 = 15,
        S44 = 21;

        str = Prion.Utf8.encode(str);
        x = convertToWordArray(str);
        a = 0x67452301;
        b = 0xEFCDAB89;
        c = 0x98BADCFE;
        d = 0x10325476;

        xl = x.length;
        for (k = 0; k < xl; k += 16) {
            AA = a;
            BB = b;
            CC = c;
            DD = d;
            a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
            d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
            c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
            b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
            a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
            d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
            c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
            b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
            a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
            d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
            c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
            b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
            a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
            d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
            c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
            b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
            a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
            d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
            c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
            b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
            a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
            d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);
            c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
            b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
            a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
            d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
            c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
            b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
            a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
            d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
            c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
            b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
            a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
            d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
            c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
            b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
            a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
            d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
            c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
            b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
            a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
            d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
            c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
            b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
            a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
            d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
            c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
            b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
            a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);
            d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
            c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
            b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
            a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
            d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
            c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
            b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
            a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
            d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
            c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);
            b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
            a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
            d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
            c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
            b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
            a = addUnsigned(a, AA);
            b = addUnsigned(b, BB);
            c = addUnsigned(c, CC);
            d = addUnsigned(d, DD);
        }

        var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);

        return temp.toLowerCase();
    };

} (window, document));